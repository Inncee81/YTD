<html>
<head>
<title>KOL Help: TObj object (main frame)</title>
<base target="_top">
</head>

<body bgcolor="#FFFFEF" text="#000000" link="#008080" vlink="#008000" alink="#808000">
<p><font face="Courier" color="#800080"><b>TObj( unit <a href=kol_pas.htm>KOL.pas</a> )
 <font face="Wingdings">ï</font> <a href=_tobj.htm>_TObj</a>
</b></font></p>
<p><b>
TObj = object( <a href=_tobj.htm target="_top">_TObj</a> )
</b></p>
Prototype for all objects of KOL. All its methods are important to
implement objects in a manner similar to Delphi TObject class.
<h3 align="center"><font color="#FF8080">TObj properties</font></h3>
<a name="refcount"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RefCount</b></font>: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="free"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Free</b></font>: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
Before calling destructor of object, checks if passed pointer is not
nil - similar what is done in VCL for TObject. It is ALWAYS recommended
to use Free instead of <a href=#destroy target="main">Destroy</a> - see also comments to <a href=#refinc target="main">RefInc</a>, <a href=#refdec target="main">RefDec</a>.
</p>
<a name="tag"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Tag</b></font>: <b>DWORD</b>;</font>
<br>
Custom data field.
</p>
<h4 align="center"><font color="black">Properties, inherited from <a href="_tobj.htm" target="_top">_TObj</a></font></h4>
<h3 align="center"><font color="#FF8080">TObj methods</font></h3>
<a name="destroy"></a>
<p>
<font face="Courier" color="#800080"><b>destructor</b> <font color="#808000"><b>Destroy</b></font>; <b>virtual</b>;</font>
<br>
Disposes memory, allocated to an object. Does not release huge strings,
dynamic arrays and so on. Such memory should be freeing in overriden
destructor.
</p>
<a name="final"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>Final</b></font>;</font>
<br>
It is called in destructor to perform <a href=#ondestroy target="main">OnDestroy</a> event call and to
released objects, added to <a href=#fautofree target="main">fAutoFree</a> list.
</p>
<a name="refinc"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>RefInc</b></font>;</font>
<br>
See comments below.
</p>
<a name="refdec"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>RefDec</b></font>: <b>Integer</b>;</font>
<br>
Decrements reference count. If it is becoming &lt;0, and <a href=#free target="main">Free</a>
method was already called, object is (self-) destroyed. Otherwise,
<a href=#free target="main">Free</a> method does not destroy object, but only sets flag
&quot;<a href=#free target="main">Free</a> was called&quot;.
<br>
Use RefInc..RefDec to provide a block of code, where
object can not be destroyed by call of <a href=#free target="main">Free</a> method.
This makes code more safe from intersecting flows of processing,
where some code want to destroy object, but others suppose that it
is yet existing.
<br>
If You want to release object at the end of block RefInc..RefDec,
do it immediately BEFORE call of last RefDec (to avoid situation,
when object is released in result of RefDec, and attempt to
destroy it follow leads to AV exception).
<br>
Actually, this &quot;function&quot; is a procedure and does not return
any sensible value. It is declared as a function for internal
needs (to avoid creating separate code for <a href=#free target="main">Free</a> method)
</p>
<a name="instancesize"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>InstanceSize</b></font>: <b>Integer</b>;</font>
<br>
Returns a size of object instance.
</p>
<a name="create"></a>
<p>
<font face="Courier" color="#800080"><b>constructor</b> <font color="#808000"><b>Create</b></font>;</font>
<br>
Constructor. Do not call it. Instead, use New&lt;objectname&gt; function
call for certain object, e.g., <a href=kol_pas.htm#newlabel target="_top">NewLabel</a>( AParent, 'caption' );
</p>
<a name="ancestorofobject"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>AncestorOfObject</b></font>( Obj: <b>Pointer</b> ): <b>Boolean</b>;</font>
<br>
Is intended to replace 'is' operator, which is not applicable to objects.
</p>
<a name="vmtaddr"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>VmtAddr</b></font>: <b>Pointer</b>;</font>
<br>
Returns addres of virtual methods table of object.
</p>
<a name="add2autofree"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>Add2AutoFree</b></font>( Obj: <a href=kol_pas.htm#pobj target="_top">PObj</a> );</font>
<br>
Adds an object to the list of objects, destroyed automatically
when the object is destroyed. Do not add here child controls of
the <a href=tcontrol.htm target="_top">TControl</a> (these are destroyed by another way). Only non-control
objects, which are not destroyed automatically, should be added here.
</p>
<a name="add2autofreeex"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>Add2AutoFreeEx</b></font>( Proc: <a href=kol_pas.htm#tobjectmethod target="_top">TObjectMethod</a> );</font>
<br>
Adds an event handler to the list of events, called in destructor.
This method is mainly for internal use, and allows to auto-destroy
VCL components, located on KOL form at design time (in MCK project).
</p>
<a name="removefromautofree"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>RemoveFromAutoFree</b></font>( Obj: <a href=kol_pas.htm#pobj target="_top">PObj</a> );</font>
<br>
Removes an object from auto-free list
</p>
<a name="removefromautofreeex"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>RemoveFromAutoFreeEx</b></font>( Proc: <a href=kol_pas.htm#tobjectmethod target="_top">TObjectMethod</a> );</font>
<br>
Removes a procedure from auto-free list
</p>
<h4 align="center"><font color="black">Methods, inherited from <a href="_tobj.htm" target="_top">_TObj</a></font></h4>
<h3 align="center"><font color="#FF8080">TObj events</font></h3>
<a name="ondestroy"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnDestroy</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
This event is provided for any KOL object, so You can provide your own
OnDestroy event for it.
</p>
<h4 align="center"><font color="black">Events, inherited from <a href="_tobj.htm" target="_top">_TObj</a></font></h4>
<h3 align="center"><font color="#FF8080">TObj fields</font></h3>
<a name="fautofree"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fAutoFree</b></font>: <a href=kol_pas.htm#plist target="_top">PList</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Is called from a constructor to initialize created object instance
filling its fields with 0. Can be overriden in descendant objects
to add another initialization code there. (Main reason of intending
is what constructors can not be virtual in poor objects).
</p>
<a name="ftag"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fTag</b></font>: <b>DWORD</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Custom data.
</p>
<h4 align="center"><font color="black">Fields, inherited from <a href="_tobj.htm" target="_top">_TObj</a></font></h4>
<hr>
<p align="center">[&nbsp;<a href=index.htm>Index</a>&nbsp;]</p>
<p align="center"><font face="Comic Sans MS"><small>This help is generated 14-Jun-2010 by KOL Help generator, (C) 2000-2001 by Vladimir Kladov<br>Modified (C) 2003 by Alexander Bartov</small></font></p>
</body>
</html>
