<html>
<head>
<title>KOL Help: TCanvas object (main frame)</title>
<base target="_top">
</head>

<body bgcolor="#FFFFEF" text="#000000" link="#008080" vlink="#008000" alink="#808000">
<p><font face="Courier" color="#800080"><b>TCanvas( unit <a href=kol_pas.htm>KOL.pas</a> )
 <font face="Wingdings">ï</font> <a href=tobj.htm>TObj</a>
 <font face="Wingdings">ï</font> <a href=_tobj.htm>_TObj</a>
</b></font></p>
<p><b>
TCanvas = object( <a href=tobj.htm target="_top">TObj</a> )
</b></p>
Very similar to VCL's TCanvas object. But with some changes, specific
for KOL: there is no necessary to use canvases in all applications.
And graphic tools objects are not created with canvas, but only
if really accessed in program. (Actually, even if paint box used,
only programmer decides, if to implement painting using Canvas or
to call low level API drawing functions working directly with DC).
Therefore TCanvas has some powerful extensions: rotated text support,
geometric pen support - just by changing correspondent properties
of certain graphic tool objects (Font.FontOrientation, Pen.GeometricPen).
See also additional <a href=#font target="main">Font</a> properties (Font.FontWeight, Font.FontQuality,
etc.
<h3 align="center"><font color="#FF8080">TCanvas properties</font></h3>
<a name="handle"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Handle</b></font>: HDC;</font>
<br>
GDI device context object handle. Never created by
Canvas itself (to use Canvas with memory bitmaps,
always create DC by yourself and assign it to the
Handle property of Canvas object, or use property
Canvas of a bitmap).
</p>
<a name="penpos"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>PenPos</b></font>: TPoint;</font>
<br>
Position of a pen.
</p>
<a name="pen"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Pen</b></font>: <a href=kol_pas.htm#pgraphictool target="_top">PGraphicTool</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
Pen of Canvas object. Do not change its Pen.OnChange event value.
</p>
<a name="brush"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Brush</b></font>: <a href=kol_pas.htm#pgraphictool target="_top">PGraphicTool</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
Brush of Canvas object. Do not change its Brush.OnChange event value.
</p>
<a name="font"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Font</b></font>: <a href=kol_pas.htm#pgraphictool target="_top">PGraphicTool</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
Font of Canvas object. Do not change its Font.OnChange event value.
</p>
<a name="modecopy"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>ModeCopy</b></font>: <a href=kol_pas.htm#tcopymode target="_top">TCopyMode</a>;</font>
<br>
Current copy mode. Is used in <a href=#copyrect target="main">CopyRect</a> method.
</p>
<a name="pixels"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Pixels</b></font>[ X, Y: <b>Integer</b> ]: TColor;</font>
<br>
Obvious.
</p>
<h4 align="center"><font color="black">Properties, inherited from <a href="tobj.htm" target="_top">TObj</a></font></h4>
<h3 align="center"><font color="#FF8080">TCanvas methods</font></h3>
<a name="destroy"></a>
<p>
<font face="Courier" color="#800080"><b>destructor</b> <font color="#808000"><b>Destroy</b></font>; <b>virtual</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="offsetandrotate"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>OffsetAndRotate</b></font>( Xoff, Yoff: <b>Integer</b>; Angle: <b>Double</b> );</font>
<br>
Transforms world coordinates so that Xoff and Yoff become the
coordinates of the origin (0,0) and all further drawing is done
rotated around that point by the Angle (which is given in radians)
</p>
<a name="arc"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>Arc</b></font>( X1, Y1, X2, Y2, X3, Y3, X4, Y4: <b>Integer</b> ); stdcall;</font>
<br>
Draws arc. For more info, see Delphi TCanvas help.
</p>
<a name="chord"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>Chord</b></font>( X1, Y1, X2, Y2, X3, Y3, X4, Y4: <b>Integer</b> ); stdcall;</font>
<br>
Draws chord. For more info, see Delphi TCanvas help.
</p>
<a name="drawfocusrect"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>DrawFocusRect</b></font>( <b>const</b> Rect: TRect );</font>
<br>
Draws rectangle to represent focused visual object.
For more info, see Delphi TCanvas help.
</p>
<a name="ellipse"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>Ellipse</b></font>( X1, Y1, X2, Y2: <b>Integer</b> );</font>
<br>
Draws an ellipse. For more info, see Delphi TCanvas help.
</p>
<a name="fillrect"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>FillRect</b></font>( <b>const</b> Rect: TRect );</font>
<br>
Fills rectangle. For more info, see Delphi TCanvas help.
</p>
<a name="fillrgn"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>FillRgn</b></font>( <b>const</b> Rgn: HRgn );</font>
<br>
Fills region. For more info, see Delphi TCanvas help.
</p>
<a name="floodfill"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>FloodFill</b></font>( X, Y: <b>Integer</b>; Color: TColor; FillStyle: <a href=kol_pas.htm#tfillstyle target="_top">TFillStyle</a> );</font>
<br>
Fills a figure with givien color, floodfilling its surface.
For more info, see Delphi TCanvas help.
</p>
<a name="framerect"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>FrameRect</b></font>( <b>const</b> Rect: TRect );</font>
<br>
Draws a rectangle using <a href=#brush target="main">Brush</a> settings (color, etc.).
For more info, see Delphi TCanvas help.
</p>
<a name="moveto"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>MoveTo</b></font>( X, Y: <b>Integer</b> );</font>
<br>
Moves current <a href=#penpos target="main">PenPos</a> to a new position.
For more info, see Delphi TCanvas help.
</p>
<a name="lineto"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>LineTo</b></font>( X, Y: <b>Integer</b> );</font>
<br>
Draws a line from current <a href=#penpos target="main">PenPos</a> up to new position.
For more info, see Delphi TCanvas help.
</p>
<a name="pie"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>Pie</b></font>( X1, Y1, X2, Y2, X3, Y3, X4, Y4: <b>Integer</b> ); stdcall;</font>
<br>
Draws a pie. For more info, see Delphi TCanvas help.
</p>
<a name="polygon"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>Polygon</b></font>( <b>const</b> Points: <b>array</b> <b>of</b> TPoint );</font>
<br>
Draws a polygon. For more info, see Delphi TCanvas help.
</p>
<a name="polyline"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>Polyline</b></font>( <b>const</b> Points: <b>array</b> <b>of</b> TPoint );</font>
<br>
Draws a bound for polygon. For more info, see Delphi TCanvas help.
</p>
<a name="rectangle"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>Rectangle</b></font>( X1, Y1, X2, Y2: <b>Integer</b> );</font>
<br>
Draws a rectangle using current <a href=#pen target="main">Pen</a> and/or <a href=#brush target="main">Brush</a>.
For more info, see Delphi TCanvas help.
</p>
<a name="roundrect"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>RoundRect</b></font>( X1, Y1, X2, Y2, X3, Y3: <b>Integer</b> );</font>
<br>
Draws a rounded rectangle. For more info, see Delphi TCanvas help.
</p>
<a name="textouta"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>TextOutA</b></font>( X, Y: <b>Integer</b>; <b>const</b> Text: AnsiString ); stdcall;</font>
<br>
Draws an ANSI text. For more info, see Delphi TCanvas help.
</p>
<a name="textout"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>TextOut</b></font>( X, Y: <b>Integer</b>; <b>const</b> Text: KOLString ); stdcall;</font>
<br>
Draws a text. For more info, see Delphi TCanvas help.
</p>
<a name="exttextout"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>ExtTextOut</b></font>( X, Y: <b>Integer</b>; Options: <b>DWORD</b>; <b>const</b> Rect: TRect; <b>const</b> Text: AnsiString; <b>const</b> Spacing: <b>array</b> <b>of</b> <b>Integer</b> );</font>
<br>
</p>
<a name="textrect"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>TextRect</b></font>( <b>const</b> Rect: TRect; X, Y: <b>Integer</b>; <b>const</b> Text: Ansistring );</font>
<br>
Draws a text, clipping output into given rectangle.
For more info, see Delphi TCanvas help.
</p>
<a name="drawtext"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>DrawText</b></font>( Text: AnsiString; <b>var</b> Rect: TRect; Flags: <b>DWord</b> );</font>
<br>
</p>
<a name="textextent"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>TextExtent</b></font>( <b>const</b> Text: Ansistring ): TSize;</font>
<br>
Calculates size of a Text, using current <a href=#font target="main">Font</a> settings.
Does not need in <a href=#handle target="main">Handle</a> for Canvas object (if it is not
yet allocated, temporary device context is created and used.
</p>
<a name="textarea"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>TextArea</b></font>( <b>const</b> Text: AnsiString; <b>var</b> Sz: TSize; <b>var</b> P0: TPoint );</font>
<br>
Calculates size and starting point to output Text,
taking into considaration all <a href=#font target="main">Font</a> attributes, including
Orientation (only if <a href=kol_pas.htm#globalgraphics_usefontorient target="_top">GlobalGraphics_UseFontOrient</a> flag
is set to True, i.e. if rotated fonts are used).
Like for <a href=#textextent target="main">TextExtent</a>, does not need in <a href=#handle target="main">Handle</a> (and if this
last is not yet allocated/assigned, temporary device context
is created and used).
</p>
<a name="wtextarea"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>WTextArea</b></font>( <b>const</b> Text: WideString; <b>var</b> Sz: TSize; <b>var</b> P0: TPoint );</font>
<br>
Calculates size and starting point to output Text,
taking into considaration all <a href=#font target="main">Font</a> attributes, including
Orientation (only if <a href=kol_pas.htm#globalgraphics_usefontorient target="_top">GlobalGraphics_UseFontOrient</a> flag
is set to True, i.e. if rotated fonts are used).
Like for <a href=#textextent target="main">TextExtent</a>, does not need in <a href=#handle target="main">Handle</a> (and if this
last is not yet allocated/assigned, temporary device context
is created and used).
</p>
<a name="textwidth"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>TextWidth</b></font>( <b>const</b> Text: Ansistring ): <b>Integer</b>;</font>
<br>
Calculates text width (using <a href=#textarea target="main">TextArea</a>).
</p>
<a name="textheight"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>TextHeight</b></font>( <b>const</b> Text: Ansistring ): <b>Integer</b>;</font>
<br>
Calculates text height (using <a href=#textarea target="main">TextArea</a>).
</p>
<a name="cliprect"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>ClipRect</b></font>: TRect;</font>
<br>
returns ClipBox. by Dmitry Zharov.
</p>
<a name="wtextout"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>WTextOut</b></font>( X, Y: <b>Integer</b>; <b>const</b> WText: WideString ); stdcall;</font>
<br>
Draws a Unicode text.
</p>
<a name="wexttextout"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>WExtTextOut</b></font>( X, Y: <b>Integer</b>; Options: <b>DWORD</b>; <b>const</b> Rect: TRect; <b>const</b> WText: WideString; <b>const</b> Spacing: <b>array</b> <b>of</b> <b>Integer</b> );</font>
<br>
</p>
<a name="wdrawtext"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>WDrawText</b></font>( WText: WideString; <b>var</b> Rect: TRect; Flags: <b>DWord</b> );</font>
<br>
</p>
<a name="wtextrect"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>WTextRect</b></font>( <b>const</b> Rect: TRect; X, Y: <b>Integer</b>; <b>const</b> WText: WideString );</font>
<br>
Draws a Unicode text, clipping output into given rectangle.
</p>
<a name="wtextextent"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>WTextExtent</b></font>( <b>const</b> WText: WideString ): TSize;</font>
<br>
Calculates Unicode text width and height.
</p>
<a name="wtextwidth"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>WTextWidth</b></font>( <b>const</b> WText: WideString ): <b>Integer</b>;</font>
<br>
Calculates Unicode text width.
</p>
<a name="wtextheight"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>WTextHeight</b></font>( <b>const</b> WText: WideString ): <b>Integer</b>;</font>
<br>
Calculates Unicode text height.
</p>
<a name="copyrect"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>CopyRect</b></font>( <b>const</b> DstRect: TRect; SrcCanvas: <a href=kol_pas.htm#pcanvas target="_top">PCanvas</a>; <b>const</b> SrcRect: TRect );</font>
<br>
Copyes a rectangle from source to destination, using StretchBlt.
</p>
<a name="assign"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>Assign</b></font>( SrcCanvas: <a href=kol_pas.htm#pcanvas target="_top">PCanvas</a> ): <b>Boolean</b>;</font>
<br>
</p>
<a name="requiredstate"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>RequiredState</b></font>( ReqState: <b>DWORD</b> ): HDC; stdcall;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
It is possible to call this method before using <a href=#handle target="main">Handle</a> property
to pass it into API calls - to provide valid combinations of
pen, brush and font, selected into device context. This method
can not provide valid <a href=#handle target="main">Handle</a> - You always must create it by
yourself and assign to TCanvas.Handle property manually.
To optimize assembler version, returns <a href=#handle target="main">Handle</a> value.
</p>
<a name="deselecthandles"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>DeselectHandles</b></font>;</font>
<br>
Call this method to deselect all graphic tool objects from the canvas.
</p>
<h4 align="center"><font color="black">Methods, inherited from <a href="tobj.htm" target="_top">TObj</a></font></h4>
<h3 align="center"><font color="#FF8080">TCanvas events</font></h3>
<a name="ongethandle"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnGetHandle</b></font>: <a href=kol_pas.htm#tongethandle target="_top">TOnGetHandle</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
For internal use only.
</p>
<a name="onchange"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnChange</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
</p>
<h4 align="center"><font color="black">Events, inherited from <a href="tobj.htm" target="_top">TObj</a></font></h4>
<h3 align="center"><font color="#FF8080">TCanvas fields</font></h3>
<a name="fispaintdc"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fIsPaintDC</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
TRUE, if DC obtained during current WM_PAINT (or WM_ERASEBKGND?)
processing for a control. This affects a way how <a href=#handle target="main">Handle</a> is released.
</p>
<h4 align="center"><font color="black">Fields, inherited from <a href="tobj.htm" target="_top">TObj</a></font></h4>
<hr>
<p align="center">[&nbsp;<a href=index.htm>Index</a>&nbsp;]</p>
<p align="center"><font face="Comic Sans MS"><small>This help is generated 14-Jun-2010 by KOL Help generator, (C) 2000-2001 by Vladimir Kladov<br>Modified (C) 2003 by Alexander Bartov</small></font></p>
</body>
</html>
