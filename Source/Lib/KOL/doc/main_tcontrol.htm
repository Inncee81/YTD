<html>
<head>
<title>KOL Help: TControl object (main frame)</title>
<base target="_top">
</head>

<body bgcolor="#FFFFEF" text="#000000" link="#008080" vlink="#008000" alink="#808000">
<p><font face="Courier" color="#800080"><b>TControl( unit <a href=kol_pas.htm>KOL.pas</a> )
 <font face="Wingdings">ï</font> <a href=tobj.htm>TObj</a>
 <font face="Wingdings">ï</font> <a href=_tobj.htm>_TObj</a>
</b></font></p>
<p><b>
TControl = object( <a href=tobj.htm target="_top">TObj</a> )
</b></p>
TControl is the basic visual object of KOL. And now, all visual
objects have the same type <a href=kol_pas.htm#pcontrol target="_top">PControl</a>, differing only in &quot;constructor&quot;,
which during creating of object adjusts it so it can play role of
desired control. Idea of incapsulating of all visual objects having
the most common set of properties, is belonging to Vladimir Kladov,
(C) 2000.
<br>&nbsp;&nbsp;&nbsp;<b> Since all visual objects are represented
in KOL by this single object type, not all methods, properties and
events defined in TControl, are applicable to different visual objects.
See also notes about certain control kinds, located together with its
<a href="kol_pas.htm#visual_objects_constructors">
constructing functions definitions</a></b>.
<h3 align="center"><font color="#FF8080">TControl properties</font></h3>
<a name="parent"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Parent</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Parent of TParent object. Also must be of TParent type or derived from TParent.
</p>
<a name="enabled"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Enabled</b></font>: <b>Boolean</b>;</font>
<br>
Enabled usually used to decide if control can get keyboard focus
or been clicked by mouse.
</p>
<a name="visible"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Visible</b></font>: <b>Boolean</b>;</font>
<br>
Obvious.
</p>
<a name="tobevisible"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>ToBeVisible</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
Returns True, if a control is supposed to be visible when its
form is showing. Thus is, True is returned if either control
is <a href=#visible target="main">Visible</a> or hidden, but marked with flag fCreateHidden.
</p>
<a name="createvisible"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>CreateVisible</b></font>: <b>Boolean</b>;</font>
<br>
False by default. If You want your form to be created visible and
flick due creation, set it to True. This does not affect size of
executable anyway.
</p>
<a name="align"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Align</b></font>: <a href=kol_pas.htm#tcontrolalign target="_top">TControlAlign</a>;</font>
<br>
Align style of a control. If this property is not used in your
application, there are no additional code added. Aligning of
controls is made in KOL like in VCL. To align controls when
initially create ones, use &quot;transparent&quot; function <a href=#setalign target="main">SetAlign</a>
(&quot;transparent&quot; means that it returns @Self as a result).
<br>
Note, that it is better not to align combobox caClient, caLeft or
caRight (better way is to place a panel with <a href=#border target="main">Border</a> = 0 and
EdgeStyle = esNone, align it as desired and to place a combobox on it
aligning caTop or caBottom). Otherwise, big problems could be under
Win9x/Me, and some delay could occur under any other systems.
<br> Do not attempt to align some kinds of controls (like combobox)
caLeft or caRight, this can cause infinite recursion.
</p>
<a name="boundsrect"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>BoundsRect</b></font>: TRect;</font>
<br>
Bounding rectangle of the visual. Coordinates are relative
to top left corner of parent's <a href=#clientrect target="main">ClientRect</a>, or to top left corner
of screen (for TForm).
</p>
<a name="left"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Left</b></font>: <b>Integer</b>;</font>
<br>
Left horizontal position.
</p>
<a name="top"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Top</b></font>: <b>Integer</b>;</font>
<br>
Top vertical position.
</p>
<a name="width"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Width</b></font>: <b>Integer</b>;</font>
<br>
Width of TVisual object.
</p>
<a name="height"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Height</b></font>: <b>Integer</b>;</font>
<br>
Height of TVisual object.
</p>
<a name="position"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Position</b></font>: TPoint;</font>
<br>
Represents top left position of the object. See also <a href=#boundsrect target="main">BoundsRect</a>.
</p>
<a name="minwidth"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>MinWidth</b></font>: <b>Integer</b>;</font>
<br>
Minimal width constraint.
</p>
<a name="minheight"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>MinHeight</b></font>: <b>Integer</b>;</font>
<br>
Minimal height constraint.
</p>
<a name="maxwidth"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>MaxWidth</b></font>: <b>Integer</b>;</font>
<br>
Maximal width constraint.
</p>
<a name="maxheight"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>MaxHeight</b></font>: <b>Integer</b>;</font>
<br>
Maximal height constraint.
</p>
<a name="clientwidth"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>ClientWidth</b></font>: <b>Integer</b>;</font>
<br>
Obvious. Accessing this property, program forces window latent creation.
</p>
<a name="clientheight"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>ClientHeight</b></font>: <b>Integer</b>;</font>
<br>
Obvious. Accessing this property, program forces window latent creation.
</p>
<a name="windowed"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Windowed</b></font>: <b>Boolean</b>;</font>
<br>
Constantly returns True, if object is windowed (i.e. owns
correspondent window handle). Otherwise, returns False.
<br>
By now, all the controls are windowed (there are no controls in KOL, which are
emulating window, acually belonging to <a href=#parent target="main">Parent</a> - like TGraphicControl
in VCL).
<br>
Writing of this property provided only for internal purposes,
do not change it directly unless you understand well what you do.
</p>
<a name="mdiclient"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>MDIClient</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
For MDI forms only: returns MDI client window control, containng all MDI
children. Use this window to send specific messages to rule MDI children.
</p>
<a name="childcount"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>ChildCount</b></font>: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
Returns number of commonly accessed child objects (without
<a href=#memberscount target="main">MembersCount</a>).
</p>
<a name="children"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Children</b></font>[ Idx: <b>Integer</b> ]: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
Child items of TVisual object. Property is reintroduced here
to separate access to always visible Children[] from restricted
a bit <a href=#members target="main">Members</a>[].
</p>
<a name="memberscount"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>MembersCount</b></font>: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
Returns number of &quot;internal&quot; child objects, which are
not accessible through common <a href=#children target="main">Children</a>[] property.
</p>
<a name="members"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Members</b></font>[ Idx: <b>Integer</b> ]: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
Members and children array of the object (first from 0 to
<a href=#memberscount target="main">MembersCount</a>-1 are Members[], and <a href=#children target="main">Children</a>[] are followed by
them. Usually You do not need to use this list. Use instead
<a href=#children target="main">Children</a>[0..ChildCount] property, Members[] is intended for
internal needs of XCL (and in KOL by now Members and <a href=#children target="main">Children</a>
actually are the same properties).
</p>
<a name="windowedparent"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>WindowedParent</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
Returns nearest windowed parent, the same as <a href=#parent target="main">Parent</a>.
</p>
<a name="activecontrol"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>ActiveControl</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
</p>
<a name="handle"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Handle</b></font>: HWnd;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
Returns descriptor of system window object. If window is not yet
created, 0 is returned. To allocate handle, call <a href=#createwindow target="main">CreateWindow</a> method.
</p>
<a name="parentwindow"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>ParentWindow</b></font>: HWnd;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
Returns handle of parent window (not TControl object, but system
window object handle).
</p>
<a name="clsstyle"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>ClsStyle</b></font>: <b>DWord</b>;</font>
<br>
Window class style. Available styles are:
<table border=0>
<tr><td valign=top><font face=Fixedsys>CS_BYTEALIGNCLIENT</font></td><td>
- Aligns the window's client area on the byte boundary
(in the x direction) to enhance performance during
drawing operations.
</td></tr>

<tr><td valign=top><font face=Fixedsys>CS_BYTEALIGNWINDOW</font></td><td>
- Aligns a window on a byte boundary (in the x
direction).
</td></tr>

<tr><td valign=top><font face=Fixedsys>CS_CLASSDC</font></td><td>
- Allocates one device context to be shared by all
windows in the class.
</td></tr>

<tr><td valign=top><font face=Fixedsys>CS_DBLCLKS</font></td><td>
- Sends double-click messages to the window
procedure when the user double-clicks the mouse while the
cursor is within a window belonging to the class.
</td></tr>

<tr><td valign=top><font face=Fixedsys>CS_GLOBALCLASS</font></td><td>
- Allows an application to create a window of
the class regardless of the value of the hInstance parameter.
<br>&nbsp;&nbsp;&nbsp;
You can create a global class by creating
the window class in a dynamic-link library (DLL) and listing the
name of the DLL in the registry under specific keys.
</td></tr>

<tr><td valign=top><font face=Fixedsys>CS_HREDRAW</font></td><td>
- Redraws the entire window if a movement or
size adjustment changes the width of the client area.
</td></tr>

<tr><td valign=top><font face=Fixedsys>CS_NOCLOSE</font></td><td>
- Disables the <a href=#close target="main">Close</a> command on the System menu.
</td></tr>

<tr><td valign=top><font face=Fixedsys>CS_OWNDC</font></td><td>
- Allocates a unique device context for each window
in the class.
</td></tr>

<tr><td valign=top><font face=Fixedsys>CS_PARENTDC</font></td><td>
- Sets the clipping region of the child window to
that of the parent window so that the child can draw on the parent.
</td></tr>

<tr><td valign=top><font face=Fixedsys>CS_SAVEBITS</font></td><td>
- Saves, as a bitmap, the portion of the screen
image obscured by a window. Windows uses the saved bitmap to re-create
the screen image when the window is removed.
</td></tr>

<tr><td valign=top><font face=Fixedsys>CS_VREDRAW</font></td><td>
- Redraws the entire window if a movement or size
adjustment changes the height of the client area.
</td></tr>

</table> For more info, see Win32.hlp (keyword 'WndClass');
</p>
<a name="style"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Style</b></font>: <b>DWord</b>;</font>
<br>
Window styles. Available styles are:
<table border=0>
<tr><td valign=top><font face=Fixedsys>WS_BORDER</font></td><td>
Creates a window that has a thin-line border.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_CAPTION</font></td><td>
Creates a window that has a title bar (includes the
WS_BORDER style).
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_CHILD</font></td><td>
Creates a child window. This style cannot be used with
the WS_POPUP style.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_CHILDWINDOW</font></td><td>
Same as the WS_CHILD style.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_CLIPCHILDREN</font></td><td>
Excludes the area occupied by child windows
when drawing occurs within the parent window. This style is used
when creating the parent window.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_CLIPSIBLINGS</font></td><td>
Clips child windows relative to each other;
that is, when a particular child window receives a WM_PAINT message,
the WS_CLIPSIBLINGS style clips all other overlapping child windows
out of the region of the child window to be updated. If
WS_CLIPSIBLINGS is not specified and child windows overlap, it is
possible, when drawing within the client area of a child window,
to draw within the client area of a neighboring child window.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_DISABLED</font></td><td>
Creates a window that is initially disabled. A
disabled window cannot receive input from the user.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_DLGFRAME</font></td><td>
Creates a window that has a border of a style
typically used with dialog boxes. A window with this style cannot
have a title bar.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_GROUP</font></td><td>
Specifies the first control of a group of controls.
The group consists of this first control and all  controls defined
after it, up to the next control with the WS_GROUP style.
The first control in each group usually has the WS_TABSTOP
style so that the user can move from group to group. The user
can subsequently change the keyboard focus from one control in
the group to the next control in the group by using the direction
keys.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_HSCROLL</font></td><td>
Creates a window that has a horizontal scroll bar.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_ICONIC</font></td><td>
Creates a window that is initially minimized. Same as
the WS_MINIMIZE style.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_MAXIMIZE</font></td><td>
Creates a window that is initially maximized.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_MAXIMIZEBOX</font></td><td>
Creates a window that has a Maximize button.
Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU
style must also be specified.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_MINIMIZE</font></td><td>
Creates a window that is initially minimized.
Same as the WS_ICONIC style.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_MINIMIZEBOX</font></td><td>
Creates a window that has a Minimize button.
Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU
style must also be specified.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_OVERLAPPED</font></td><td>
Creates an overlapped window. An overlapped
window has a title bar and a border. Same as the WS_TILED style.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_OVERLAPPEDWINDOW</font></td><td>
Creates an overlapped window with the
WS_OVERLAPPED, WS_CAPTION, WS_SYSMENU, WS_THICKFRAME, WS_MINIMIZEBOX,
and WS_MAXIMIZEBOX styles. Same as the WS_TILEDWINDOW style.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_POPUP</font></td><td>
Creates a pop-up window. This style cannot be used with
the WS_CHILD style.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_POPUPWINDOW</font></td><td>
Creates a pop-up window with WS_BORDER,
WS_POPUP, and WS_SYSMENU styles. The WS_CAPTION and WS_POPUPWINDOW
styles must be combined to make the window menu visible.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_SIZEBOX</font></td><td>
Creates a window that has a sizing border. Same as the
WS_THICKFRAME style.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_SYSMENU</font></td><td>
Creates a window that has a window-menu on its title
bar. The WS_CAPTION style must also be specified.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_TABSTOP</font></td><td>
Specifies a control that can receive the keyboard focus
when the user presses the TAB key. Pressing the TAB key changes
the keyboard focus to the next control with the WS_TABSTOP style.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_THICKFRAME</font></td><td>
Creates a window that has a sizing border.
Same as the WS_SIZEBOX style.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_TILED</font></td><td>
Creates an overlapped window. An overlapped window has
a title bar and a border. Same as the WS_OVERLAPPED style.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_TILEDWINDOW</font></td><td>
Creates an overlapped window with the
WS_OVERLAPPED, WS_CAPTION, WS_SYSMENU, WS_THICKFRAME,
WS_MINIMIZEBOX, and WS_MAXIMIZEBOX styles. Same as the
WS_OVERLAPPEDWINDOW style.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_VISIBLE</font></td><td>
Creates a window that is initially visible.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_VSCROLL</font></td><td>
Creates a window that has a vertical scroll bar.
</td></tr>

</table>
See also Win32.hlp (topic <a href=#createwindow target="main">CreateWindow</a>).
</p>
<a name="exstyle"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>ExStyle</b></font>: <b>DWord</b>;</font>
<br>
Extra window styles. Available flags are following:
<table border=0>
<tr><td valign=top><font face=Fixedsys>WS_EX_ACCEPTFILES</font></td><td>
Specifies that a window created with this style
accepts drag-drop files.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_EX_APPWINDOW</font></td><td>
Forces a top-level window onto the taskbar
when the window is minimized.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_EX_CLIENTEDGE</font></td><td>
Specifies that a window has a border with a
sunken edge.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_EX_CONTEXTHELP</font></td><td>
Includes a question mark in the title bar of
the window. When the user clicks the question mark, the cursor
changes to a question mark with a pointer. If the user then clicks
a child window, the child receives a WM_HELP message. The child
window should pass the message to the parent window procedure,
which should call the WinHelp function using the HELP_WM_HELP
command. The Help application displays a pop-up window that
typically contains help for the child window.WS_EX_CONTEXTHELP
cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_EX_CONTROLPARENT</font></td><td>
Allows the user to navigate among the child
windows of the window by using the TAB key.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_EX_DLGMODALFRAME</font></td><td>
Creates a window that has a double border;
the window can, optionally, be created with a title bar by
specifying the WS_CAPTION style in the dwStyle parameter.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_EX_LEFT</font></td><td>
Window has generic &quot;left-aligned&quot; properties. This
is the default.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_EX_LEFTSCROLLBAR</font></td><td>
If the shell language is Hebrew, Arabic, or
another language that supports reading order alignment, the
vertical scroll bar (if present) is to the left of the client
area. For other languages, the style is ignored and not treated
as an error.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_EX_LTRREADING</font></td><td>
The window text is displayed using <a href=#left target="main">Left</a> to
Right reading-order properties. This is the default.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_EX_MDICHILD</font></td><td>
Creates an MDI child window.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_EX_NOPARENTNOTIFY</font></td><td>
Specifies that a child window created
with this style does not send the WM_PARENTNOTIFY message to its
parent window when it is created or destroyed.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_EX_OVERLAPPEDWINDOW</font></td><td>
Combines the WS_EX_CLIENTEDGE and
WS_EX_WINDOWEDGE styles.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_EX_PALETTEWINDOW</font></td><td>
Combines the WS_EX_WINDOWEDGE,
WS_EX_TOOLWINDOW, and WS_EX_TOPMOST styles.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_EX_RIGHT</font></td><td>
Window has generic &quot;right-aligned&quot; properties.
This depends on the window class. This style has an effect only
if the shell language is Hebrew, Arabic, or another language that
supports reading order alignment; otherwise, the style is
ignored and not treated as an error.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_EX_RIGHTSCROLLBAR</font></td><td>
Vertical scroll bar (if present) is to the
right of the client area. This is the default.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_EX_RTLREADING</font></td><td>
If the shell language is Hebrew, Arabic, or
another language that supports reading order alignment, the
window text is displayed using Right to <a href=#left target="main">Left</a> reading-order
properties. For other languages, the style is ignored and not
treated as an error.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_EX_STATICEDGE</font></td><td>
Creates a window with a three-dimensional
border style intended to be used for items that do not accept
user input.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_EX_TOOLWINDOW</font></td><td>
Creates a tool window; that is, a window
intended to be used as a floating toolbar. A tool window has
a title bar that is shorter than a normal title bar, and the
window title is drawn using a smaller font. A tool window does
not appear in the taskbar or in the dialog that appears when
the user presses ALT+TAB.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_EX_TOPMOST</font></td><td>
Specifies that a window created with this style
should be placed above all non-topmost windows and should stay
above them, even when the window is deactivated. To add or remove
this style, use the SetWindowPos function.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_EX_TRANSPARENT</font></td><td>
Specifies that a window created with this
style is to be transparent. That is, any windows that are
beneath the window are not obscured by the window. A window
created with this style receives WM_PAINT messages only after
all sibling windows beneath it have been updated.
</td></tr>

<tr><td valign=top><font face=Fixedsys>WS_EX_WINDOWEDGE</font></td><td>
Specifies that a window has a border with
a raised edge.
</td></tr>

</table>
See also Win32.hlp (topic CreateWindowEx).
</p>
<a name="cursor"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Cursor</b></font>: HCursor;</font>
<br>
Current cursor. For most of controls, sets initially to IDC_ARROW. See
also <a href=kol_pas.htm#screencursor target="_top">ScreenCursor</a>.
</p>
<a name="icon"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Icon</b></font>: HIcon;</font>
<br>
 <a name="appbutton">
 <a name="form">
Icon. By default, icon of the <a href=kol_pas.htm#applet target="_top">Applet</a> is used. To load icon from the
resource, use <a href=#iconload target="main">IconLoad</a> or <a href=#iconloadcursor target="main">IconLoadCursor</a> method - this is more correct, because
in such case a special flag is set to prevent attempts to destroy
shared icon object in the destructor of the control.
</p>
<a name="menu"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Menu</b></font>: HMenu;</font>
<br>
Menu (or ID of control - for standard GUI controls).
</p>
<a name="helpcontext"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>HelpContext</b></font>: <b>Integer</b>;</font>
<br>
Help context.
</p>
<a name="helppath"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>HelpPath</b></font>: KOLString;</font>
<br>
Property of a form or an <a href=kol_pas.htm#applet target="_top">Applet</a>. Change it to provide custom path to
WinHelp format help file. If HtmlHelp used, call global procedure
AssignHtmlHelp instead.
</p>
<a name="caption"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Caption</b></font>: KOLString;</font>
<br>
 <a name="appbutton">
 <a name="form">
 <a name="button">
 <a name="bitbtn">
 <a name="label">
 <a name="wwlabel">
 <a name="3dlabel">
Caption of a window. For standard Windows buttons, labels and so on
not a caption of a window, but text of the window.
</p>
<a name="text"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Text</b></font>: KOLString;</font>
<br>
 <a name="edit">
 <a name="memo">
The same as <a href=#caption target="main">Caption</a>. To make more convenient with Edit controls. For
Rich Edit control, use property <a href=#re_text target="main">RE_Text</a>.
</p>
<a name="selstart"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>SelStart</b></font>: <b>Integer</b>;</font>
<br>
 <a name="edit">
 <a name="memo">
 <a name="richedit">
Start of selection (editbox - character position).
</p>
<a name="sellength"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>SelLength</b></font>: <b>Integer</b>;</font>
<br>
 <a name="edit">
 <a name="memo">
 <a name="richedit">
 <a name="listbox">
 <a name="listview">
Length of selection (editbox - number of characters selected, multiselect
listbox or listview - number of items selected).
<br>
Note, that for combobox and single-select listbox it always returns 0
(though for single-select listview, returns 1, if there is an item
selected).
<br>
It is possible to set SelLength only for memo and richedit controls.
</p>
<a name="selection"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Selection</b></font>: KOLString;</font>
<br>
 <a name="edit">
 <a name="memo">
 <a name="richedit">
Selected text (editbox, richedit) as string. Can be useful to replace
selection. For rich edit, use <a href=#re_text target="main">RE_Text</a>[ reText, TRUE ], if you want to
read correctly characters from another locale then ANSI only.
</p>
<a name="curindex"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>CurIndex</b></font>: <b>Integer</b>;</font>
<br>
 <a name="listbox">
 <a name="combo">
 <a name="toolbar">
Index of current item (for listbox, combobox) or button index pressed
or dropped down (for toolbar button, and only in appropriate event
handler call).
<br>
You cannot use it to set or remove a selection in a multiple-selection
list box, so you should set option loNoExtendSel to true.
<br>
In <a href=#onclick target="main">OnClick</a> event handler, CurIndex has not yet changed for listbox or combobox.
Use <a href=#onselchange target="main">OnSelChange</a> to respond to selection changes.
</p>
<a name="count"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Count</b></font>: <b>Integer</b>;</font>
<br>
 <a name="listbox">
 <a name="combo">
 <a name="listview">
 <a name="treeview">
 <a name="edit">
 <a name="memo">
 <a name="richedit">
 <a name="toolbar">
Number of items (listbox, combobox, listview) or lines (multiline
editbox, richedit control) or buttons (toolbar). It is possible to
assign a value to this property only for listbox control with loNoData
style and for list view control with lvoOwnerData style (virtual list
box and list view).
</p>
<a name="items"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Items</b></font>[ Idx: <b>Integer</b> ]: KOLString;</font>
<br>
 <a name="edit">
 <a name="listbox">
 <a name="combo">
 <a name="memo">
 <a name="richedit">
Obvious. Used with editboxes, listbox, combobox. With list view, use
property <a href=#lvitems target="main">LVItems</a> instead.
</p>
<a name="itemselected"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>ItemSelected</b></font>[ ItemIdx: <b>Integer</b> ]: <b>Boolean</b>;</font>
<br>
 <a name="edit">
 <a name="memo">
 <a name="listbox">
 <a name="combo">
 <a name="listview">
Returns True, if a line (in editbox) or an item (in listbox, combobox,
listview) is selected.
Can be set only for listboxes. For listboxes, which are not multiselect, and
for combo lists, it is possible only to set to True, to change selection.
</p>
<a name="itemdata"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>ItemData</b></font>[ Idx: <b>Integer</b> ]: <b>DWORD</b>;</font>
<br>
 <a name="listbox">
 <a name="combo">
Access to user-defined data, associated with the item of a list box and
combo box.
</p>
<a name="droppedwidth"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>DroppedWidth</b></font>: <b>Integer</b>;</font>
<br>
 <a name="combo">
Allows to change width of dropped down items list for combobox (only!)
control.
</p>
<a name="droppeddown"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>DroppedDown</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="combo">
Dropped down state for combo box. Set it to TRUE or FALSE to change
dropped down state.
</p>
<a name="bitbtndrawmnemonic"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>BitBtnDrawMnemonic</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="bitbtn">
Set this property to TRUE to provide correct drawing of bit btn control
caption with '&amp;' characters (to remove such characters, and underline
follow ones).
</p>
<a name="textshiftx"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TextShiftX</b></font>: <b>Integer</b>;</font>
<br>
 <a name="bitbtn">
Horizontal shift for bitbtn text when the bitbtn is pressed.
</p>
<a name="textshifty"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TextShiftY</b></font>: <b>Integer</b>;</font>
<br>
 <a name="bitbtn">
Vertical shift for bitbtn text when the bitbtn is pressed.
</p>
<a name="bitbtnimgidx"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>BitBtnImgIdx</b></font>: <b>Integer</b>;</font>
<br>
 <a name="bitbtn">
BitBtn image index for the first image in list view, used as bitbtn
image. It is used only in case when BitBtn is created with bboImageList
option.
</p>
<a name="bitbtnimglist"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>BitBtnImgList</b></font>: THandle;</font>
<br>
 <a name="bitbtn">
BitBtn Image list. Assign image list handle to change it.
</p>
<a name="defaultbtn"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>DefaultBtn</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="button">
 <a name="bitbtn">
Set this property to true to make control clicked when ENTER key is pressed.
This property uses <a href=#onmessage target="main">OnMessage</a> event of the parent form, storing it into
fOldOnMessage field and calling in chain. So, assign default button
after setting <a href=#onmessage target="main">OnMessage</a> event for the form.
</p>
<a name="cancelbtn"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>CancelBtn</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="button">
 <a name="bitbtn">
Set this property to true to make control clicked when escape key is pressed.
This property uses <a href=#onmessage target="main">OnMessage</a> event of the parent form, storing it into
fOldOnMessage field and calling in chain. So, assign cancel button
after setting <a href=#onmessage target="main">OnMessage</a> event for the form.
</p>
<a name="ignoredefault"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>IgnoreDefault</b></font>: <b>Boolean</b>;</font>
<br>
Change this property to TRUE to ignore default button reaction on
press ENTER key when a focus is grabbed of the control. Default
value is different for different controls. By default, <a href=#defaultbtn target="main">DefaultBtn</a>
ignored in memo, richedit (even if read-only).
</p>
<a name="color"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Color</b></font>: TColor;</font>
<br>
Property Color is one of the most common for all visual
elements (like form, control etc.) Please note, that standard GUI button
can not change its color and the most characteristics of the <a href=#font target="main">Font</a>. Also,
standard button can not become <a href=#transparent target="main">Transparent</a>. Use bitbtn for such purposes.
Also, changing Color property for some kinds of control has no effect (rich edit,
list view, tree view, etc.). To solve this, use native (for such controls)
color property, or call <a href=#perform target="main">Perform</a> method with appropriate message to set the
background color.
</p>
<a name="font"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Font</b></font>: <a href=kol_pas.htm#pgraphictool target="_top">PGraphicTool</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
If the Font property is not accessed, correspondent <a href=tgraphictool.htm target="_top">TGraphicTool</a> object
is not created and its methods are not included into executable. Leaving
properties Font and <a href=#brush target="main">Brush</a> untouched can economy executable size a lot.
</p>
<a name="brush"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Brush</b></font>: <a href=kol_pas.htm#pgraphictool target="_top">PGraphicTool</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
If not accessed, correspondent <a href=tgraphictool.htm target="_top">TGraphicTool</a> object is not created
and its methods are not referenced. See also note on <a href=#font target="main">Font</a> property.
</p>
<a name="ctl3d"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Ctl3D</b></font>: <b>Boolean</b>;</font>
<br>
Inheritable from parent controls to child ones.
</p>
<a name="modal"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Modal</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="form">
TRUE, if the form is shown modal.
</p>
<a name="modalform"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>ModalForm</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
 <a name="form">
 <a name="appbutton">
Form currently shown modal from this form or from <a href=kol_pas.htm#applet target="_top">Applet</a>.
</p>
<a name="windowstate"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>WindowState</b></font>: <a href=kol_pas.htm#twindowstate target="_top">TWindowState</a>;</font>
<br>
 <a name="form">
Window state.
</p>
<a name="canvas"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Canvas</b></font>: <a href=kol_pas.htm#pcanvas target="_top">PCanvas</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="paintbox">
Placeholder for Canvas: <a href=kol_pas.htm#pcanvas target="_top">PCanvas</a>. But in KOL, it is possible to
create applets without canvases at all. To do so, avoid using
Canvas and use DC directly (which is passed in <a href=#onpaint target="main">OnPaint</a> event).
</p>
<a name="isapplet"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>IsApplet</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
Returns true, if the control is created using <a href=kol_pas.htm#newapplet target="_top">NewApplet</a> (or CreateApplet).
</p>
<a name="isform"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>IsForm</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
Returns True, if the object is form window.
</p>
<a name="ismdichild"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>IsMDIChild</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
Returns TRUE, if the object is MDI child form. In such case, <a href=#isform target="main">IsForm</a> also
returns TRUE.
</p>
<a name="iscontrol"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>IsControl</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
Returns True, is the control is control (not form or applet).
</p>
<a name="isbutton"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>IsButton</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
Returns True, if the control is button-like or containing buttons (button,
bitbtn, checkbox, radiobox, toolbar).
</p>
<a name="hasborder"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>HasBorder</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="form">
Obvious. Form-aware.
</p>
<a name="hascaption"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>HasCaption</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="form">
Obvious. Form-aware.
</p>
<a name="canresize"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>CanResize</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="form">
Obvious. Form-aware.
</p>
<a name="stayontop"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>StayOnTop</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="form">
Obvious. Form-aware, but can be applied to controls.
</p>
<a name="border"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Border</b></font>: <b>Integer</b>;</font>
<br>
 <a name="form">
Distance between edges and child controls and between child
controls by default (if methods <a href=#placeright target="main">PlaceRight</a>, <a href=#placedown target="main">PlaceDown</a>, <a href=#placeunder target="main">PlaceUnder</a>,
<a href=#resizeparent target="main">ResizeParent</a>, <a href=#resizeparentright target="main">ResizeParentRight</a>, <a href=#resizeparentbottom target="main">ResizeParentBottom</a> are called).
<br>
Originally was named <a href=#margin target="main">Margin</a>, now I recommend to use the name 'Border' to
avoid confusion with <a href=#margintop target="main">MarginTop</a>, <a href=#marginbottom target="main">MarginBottom</a>, <a href=#marginleft target="main">MarginLeft</a> and
<a href=#marginright target="main">MarginRight</a> properties.
<br>
Initial value is always 2. Border property is used in realigning
child controls (when its <a href=#align target="main">Align</a> property is not caNone), and value
of this property determines size of borders between edges of children
and its parent and between aligned controls too.
<br>
See also properties <a href=#marginleft target="main">MarginLeft</a>, <a href=#marginright target="main">MarginRight</a>, <a href=#margintop target="main">MarginTop</a>, <a href=#marginbottom target="main">MarginBottom</a>.
</p>
<a name="margin"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Margin</b></font>: <b>Integer</b>;</font>
<br>
 <a name="form">
Old name for property <a href=#border target="main">Border</a>.
</p>
<a name="margintop"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>MarginTop</b></font>: <b>Integer</b>;</font>
<br>
Additional distance between true window client top and logical top of
client rectangle. This value is added to <a href=#top target="main">Top</a> of rectangle, returning
by property <a href=#clientrect target="main">ClientRect</a>. Together with other margins and property <a href=#border target="main">Border</a>,
this property allows to change view of form for case, that <a href=#align target="main">Align</a> property
is used to align controls on parent (it is possible to provide some
distance from child controls to its parent, and between child controls.
<br>
Originally this property was introduced to compensate incorrect
<a href=#clientrect target="main">ClientRect</a> property, calculated for some types of controls.
<br>
See also properties <a href=#border target="main">Border</a>, <a href=#marginbottom target="main">MarginBottom</a>, <a href=#marginleft target="main">MarginLeft</a>, <a href=#marginright target="main">MarginRight</a>.
</p>
<a name="marginbottom"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>MarginBottom</b></font>: <b>Integer</b>;</font>
<br>
The same as <a href=#margintop target="main">MarginTop</a>, but a distance between true window Bottom of
client rectangle and logical bottom one. Take in attention, that this value
should be POSITIVE to make logical bottom edge located above true edge.
<br>
See also properties <a href=#border target="main">Border</a>, <a href=#margintop target="main">MarginTop</a>, <a href=#marginleft target="main">MarginLeft</a>, <a href=#marginright target="main">MarginRight</a>.
</p>
<a name="marginleft"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>MarginLeft</b></font>: <b>Integer</b>;</font>
<br>
The same as <a href=#margintop target="main">MarginTop</a>, but a distance between true window <a href=#left target="main">Left</a> of
client rectangle and logical left edge.
<br>
See also properties <a href=#border target="main">Border</a>, <a href=#margintop target="main">MarginTop</a>, <a href=#marginright target="main">MarginRight</a>, <a href=#marginbottom target="main">MarginBottom</a>.
</p>
<a name="marginright"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>MarginRight</b></font>: <b>Integer</b>;</font>
<br>
The same as <a href=#marginleft target="main">MarginLeft</a>, but a distance between true window Right of
client rectangle and logical bottom one. Take in attention, that this value
should be POSITIVE to make logical right edge located left of true edge.
<br>
See also properties <a href=#border target="main">Border</a>, <a href=#margintop target="main">MarginTop</a>, <a href=#marginleft target="main">MarginLeft</a>, <a href=#marginbottom target="main">MarginBottom</a>.
</p>
<a name="tabstop"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Tabstop</b></font>: <b>Boolean</b>;</font>
<br>
True, if control can be focused using tabulating between controls.
Set it to False to make control unavailable for keyboard, but only
for mouse.
</p>
<a name="taborder"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TabOrder</b></font>: <b>Integer</b>;</font>
<br>
Order of tabulating of controls. Initially, TabOrder is equal to
creation order of controls. If TabOrder changed, TabOrder of
all controls with not less value of one is shifted up. To place
control before another, assign TabOrder of one to another.
For example:
<p align=left><font face="Courier" color="008080"><b><pre>
             Button1.TabOrder := EditBox1.TabOrder;
</pre></b></font></p>
In code above, Button1 is placed just before EditBox1 in tabulating
order (value of TabOrder of EditBox1 is incremented, as well as
for all follow controls).
</p>
<a name="focused"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Focused</b></font>: <b>Boolean</b>;</font>
<br>
True, if the control is current on form (but check also, what form
itself is focused). For form it is True, if the form is active (i.e.
it is foreground and capture keyboard). Set this value to True to make
control current and focused (if applicable).
</p>
<a name="textalign"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TextAlign</b></font>: <a href=kol_pas.htm#ttextalign target="_top">TTextAlign</a>;</font>
<br>
 <a name="label">
 <a name="panel">
 <a name="button">
 <a name="bitbtn">
 <a name="edit">
 <a name="memo">
<a href=#text target="main">Text</a> horizontal alignment. Applicable to labels, buttons,
multi-line edit boxes, panels.
</p>
<a name="verticalalign"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>VerticalAlign</b></font>: <a href=kol_pas.htm#tverticalalign target="_top">TVerticalAlign</a>;</font>
<br>
 <a name="button">
 <a name="label">
 <a name="panel">
<a href=#text target="main">Text</a> vertical alignment. Applicable to buttons, labels and panels.
</p>
<a name="wordwrap"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>WordWrap</b></font>: <b>Boolean</b>;</font>
<br>
TRUE, if this is a label, created using <a href=kol_pas.htm#newwordwraplabel target="_top">NewWordWrapLabel</a>.
</p>
<a name="shadowdeep"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>ShadowDeep</b></font>: <b>Integer</b>;</font>
<br>
 <a name="3dlabel">
Deep of a shadow (for label effect only, created calling <a href=kol_pas.htm#newlabeleffect target="_top">NewLabelEffect</a>).
</p>
<a name="cannotdoublebuf"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>CannotDoubleBuf</b></font>: <b>Boolean</b>;</font>
<br>
</p>
<a name="doublebuffered"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>DoubleBuffered</b></font>: <b>Boolean</b>;</font>
<br>
Set it to true for some controls, which are flickering in repainting
(like label effect). Slow, and requires additional code. This property
is inherited by all child controls.
<br>&nbsp;&nbsp;&nbsp;
Note: RichEdit control can not become DoubleBuffered.
</p>
<a name="transparent"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Transparent</b></font>: <b>Boolean</b>;</font>
<br>
Set it to true to get special effects. Transparency also uses
<a href=#doublebuffered target="main">DoubleBuffered</a> and inherited by child controls.
<br>&nbsp;&nbsp;&nbsp;
Please note, that some controls can not be shown properly, when
Transparent is set to True for it. If You want to make edit control
transparent (e.g., over gradient filled panel), handle its OnChanged
property and call there <a href=#invalidate target="main">Invalidate</a> to provide repainting of edit
control content. Note also, that for RichEdit control property
Transparent has no effect (as well as <a href=#doublebuffered target="main">DoubleBuffered</a>). But special
property <a href=#re_transparent target="main">RE_Transparent</a> is designed especially for RichEdit control
(it works fine, but with great number of flicks while resizing
of a control). Another note is about Edit control. To allow editing
of transparent edit box, it is necessary to invalidate it for
every pressed character. Or, use <a href=#ed_transparent target="main">Ed_Transparent</a> property instead.
</p>
<a name="ed_transparent"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Ed_Transparent</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="edit">
 <a name="memo">
Use this property for editbox to make it really <a href=#transparent target="main">Transparent</a>. Remember,
that though <a href=#transparent target="main">Transparent</a> property is inherited by child controls from
its parent, this is not so for Ed_Transparent. So, it is necessary to
set Ed_Transparent to True for every edit control explicitly.
</p>
<a name="alphablend"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>AlphaBlend</b></font>: <b>Byte</b>;</font>
<br>
 <a name="form">
If assigned to 0..254, makes window (form or control) semi-transparent
(Win2K only).
<br>
Depending on value assigned, it is possible to adjust transparency
level ( 0 - totally transparent, 255 - totally opaque).
</p>
<a name="looktabkeys"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LookTabKeys</b></font>: <a href=kol_pas.htm#ttabkeys target="_top">TTabKeys</a>;</font>
<br>
Set of keys which can be used as tabulation keys in a control.
</p>
<a name="subclassname"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>SubClassName</b></font>: KOLString;</font>
<br>
Name of window class - unique for every window class
in every run session of a program.
</p>
<a name="closequeryreason"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>CloseQueryReason</b></font>: <a href=kol_pas.htm#tclosequeryreason target="_top">TCloseQueryReason</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
Reason why <a href=#onclose target="main">OnClose</a> or <a href=#onqueryendsession target="main">OnQueryEndSession</a> called.
</p>
<a name="updatergn"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>UpdateRgn</b></font>: HRgn;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
A handle of update region. Valid only in <a href=#onpaint target="main">OnPaint</a> method. You
can use it to improve painting (for speed), if necessary. When
UpdateRgn is obtained in response to WM_PAINT message, value
of the property <a href=#erasebackground target="main">EraseBackground</a> is used to pass it to the API
function GetUpdateRgn. If UpdateRgn = 0, this means that entire
window should be repainted. Otherwise, You (e.g.) can check
if the rectangle is in clipping region using API function
RectInRegion.
</p>
<a name="erasebackground"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>EraseBackground</b></font>: <b>Boolean</b>;</font>
<br>
This value is used to pass it to the API function GetUpdateRgn,
when UpadateRgn property is obtained first in responce to WM_PAINT
message. If EraseBackground is set to True, system is responsible
for erasing background of update region before painting. If not
(default), the entire region invalidated should be painted by your
event handler.
</p>
<a name="rightclick"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RightClick</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="toolbar">
 <a name="listview">
Use this property to determine which mouse button was clicked
(applicable to toolbar in the <a href=#onclick target="main">OnClick</a> event handler).
</p>
<a name="minsizeprev"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>MinSizePrev</b></font>: <b>Integer</b>;</font>
<br>
 <a name="splitter">
Minimal allowed (while dragging splitter) size of previous control
for splitter (see <a href=kol_pas.htm#newsplitter target="_top">NewSplitter</a>).
</p>
<a name="splitminsize1"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>SplitMinSize1</b></font>: <b>Integer</b>;</font>
<br>
The same as <a href=#minsizeprev target="main">MinSizePrev</a>.
</p>
<a name="minsizenext"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>MinSizeNext</b></font>: <b>Integer</b>;</font>
<br>
 <a name="splitter">
Minimal allowed (while dragging splitter) size of the rest of parent
of splitter or of <a href=#secondcontrol target="main">SecondControl</a> (see <a href=kol_pas.htm#newsplitter target="_top">NewSplitter</a>).
</p>
<a name="splitminsize2"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>SplitMinSize2</b></font>: <b>Integer</b>;</font>
<br>
The same as <a href=#minsizenext target="main">MinSizeNext</a>.
</p>
<a name="secondcontrol"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>SecondControl</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
 <a name="splitter">
Second control to check (while dragging splitter) if its size not less
than <a href=#splitminsize2 target="main">SplitMinSize2</a> (see <a href=kol_pas.htm#newsplitter target="_top">NewSplitter</a>). By default, second control is
not necessary, and needed only in rare case when SecondControl can not
be determined automatically to restrict splitter right (bottom) position.
</p>
<a name="dragging"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Dragging</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="splitter">
True, if splitter control is dragging now by user with left
mouse button. Also, this property can be used to detect if the control
is dragging with mouse (after calling <a href=#dragstartex target="main">DragStartEx</a> method).
</p>
<a name="threebuttonpress"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>ThreeButtonPress</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
TRUE, if 3 button press detected. Check this flag in <a href=#onmousedblclk target="main">OnMouseDblClk</a> event
handler. If 3rd button click is done for a short period of time after the
double click, the control receives <a href=#onmousedblclk target="main">OnMouseDblClk</a> the second time and this
flag is set. (Applicable to the GDK and other Linux systems).
</p>
<a name="mouseincontrol"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>MouseInControl</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="bitbtn">
This property can return True only if <a href=#onmouseenter target="main">OnMouseEnter</a> / <a href=#onmouseleave target="main">OnMouseLeave</a>
event handlers are set for a control (or, for BitBtn, property <a href=#flat target="main">Flat</a>
is set to True. Otherwise, False is returned always.
</p>
<a name="flat"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Flat</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="bitbtn">
Set it to True for BitBtn, to provide either flat border for a button
or availability of &quot;highlighting&quot; (correspondent to glyph index 4).
<br>
Note: this can work incorrectly a bit under win95 without comctl32.dll
updated. Therefore, application will launch. To enforce correct working
even under Win95, use your own timer, which event handler checks for
mouse over bitbtn control, e.g.:
<p align=left><font face="Courier" color="008080"><b><pre>
    <font color="800000"><b>procedure</b></font> TForm1.Timer1Timer(Sender: <a href="kol_pas.htm#pobj target="_top""><font color="008080">PObj</font></a>);
    <font color="800000"><b>var</b></font> P: TPoint;
    <font color="800000"><b>begin</b></font>
      <font color="800000"><b>if</b></font> not BitBtn1.<a href="tcontrol.htm#mouseincontrol"><font color="008080">MouseInControl</font></a> <font color="800000"><b>then</b></font> Exit;
      GetCursorPos( P );
      P := BitBtn1.<a href="tcontrol.htm#screen2client"><font color="008080">Screen2Client</font></a>( P );
      <font color="800000"><b>if</b></font> not PtInRect( BitBtn1.<a href="tcontrol.htm#clientrect"><font color="008080">ClientRect</font></a>, P ) <font color="800000"><b>then</b></font>
      <font color="800000"><b>begin</b></font>
        BitBtn1.Flat := FALSE;
        BitBtn1.Flat := TRUE;
      <font color="800000"><b>end</b></font>;
    <font color="800000"><b>end</b></font>;
</pre></b></font></p>
</p>
<a name="repeatinterval"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RepeatInterval</b></font>: <b>Integer</b>;</font>
<br>
 <a name="bitbtn">
If this property is set to non-zero, it is interpreted (for BitBtn
only) as an interval in milliseconds between repeat button down events,
which are generated after first mouse or button click and until
button is released. Though, if the button is pressed with keyboard (with
space key), RepeatInterval value is ignored and frequency of repeatitive
clicking is determined by user keyboard settings only.
</p>
<a name="progress"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Progress</b></font>: <b>Integer</b> index(( PBM_SETPOS or $8000 ) shl 16 ) or PBM_GETPOS;</font>
<br>
 <a name="progressbar">
Only for ProgressBar.
</p>
<a name="maxprogress"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>MaxProgress</b></font>: <b>Integer</b> index(( PBM_SETRANGE32 or $8000 ) shl 16 ) or PBM_GETRANGE;</font>
<br>
 <a name="progressbar">
Only for ProgressBar. 100 is the default value.
</p>
<a name="progresscolor"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>ProgressColor</b></font>: TColor;</font>
<br>
 <a name="progressbar">
Only for ProgressBar.
</p>
<a name="progressbkcolor"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>ProgressBkColor</b></font>: TColor;</font>
<br>
 <a name="progressbar">
Obsolete. <a href=kol_pas.htm#now target="_top">Now</a> the same as <a href=#color target="main">Color</a>.
</p>
<a name="statustext"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>StatusText</b></font>[ Idx: <b>Integer</b> ]: PKOLChar;</font>
<br>
 <a name="form">
Only for forms to set/retrieve status text to/from given status panel.
Panels are enumerated from 0 to 254, 255 is to indicate simple
status bar. <a href=#size target="main">Size</a> grip in right bottom corner of status window is
displayed only if form still <a href=#canresize target="main">CanResize</a>.
<br>
When a status text is set first time, status bar window is created
(always aligned to bottom), and form is resizing to preset client height.
While status bar is showing, client height value is returned without
height of status bar. To remove status bar, call <a href=#removestatus target="main">RemoveStatus</a> method for
a form.
<br>
By default, text is left-aligned within the specified part of a status
window. You can embed tab characters (#9) in the text to center or
right-align it. <a href=#text target="main">Text</a> to the right of a single tab character is centered,
and text to the right of a second tab character is right-aligned.
<br>
If You use separate status bar onto several panels, these automatically
align its widths to the same value (width divided to number of panels).
To adjust status panel widths for every panel, use property <a href=#statuspanelrightx target="main">StatusPanelRightX</a>.
</p>
<a name="simplestatustext"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>SimpleStatusText</b></font>: PKOLChar;</font>
<br>
 <a name="form">
Only for forms to set/retrive status text to/from simple status bar.
<a href=#size target="main">Size</a> grip in right bottom corner of status window is displayed only
if form <a href=#canresize target="main">CanResize</a>.
<br>
When status text set first time, (simple) status bar window is created
(always aligned to bottom), and form is resizing to preset client height.
While status bar is showing, client height value is returned without
height of status bar. To remove status bar, call <a href=#removestatus target="main">RemoveStatus</a> method for
a form.
<br>
By default, text is left-aligned within the specified part of a status
window. You can embed tab characters (#9) in the text to center or
right-align it. <a href=#text target="main">Text</a> to the right of a single tab character is centered,
and text to the right of a second tab character is right-aligned.
</p>
<a name="statusctl"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>StatusCtl</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
Pointer to Status bar control. To &quot;create&quot; child controls on
the status bar, first create it as a child of form, for instance, and
then change its property <a href=#parent target="main">Parent</a>, e.g.:
<p align=left><font face="Courier" color="008080"><b><pre>
 <font color="800000"><b>var</b></font> Progress1: <a href="kol_pas.htm#pcontrol target="_top""><font color="008080">PControl</font></a>;
 ...
 Progress1 := NewProgressBar( Form1 );
 Progress1.<a href="tcontrol.htm#parent"><font color="008080">Parent</font></a> := Form1.StatusCtl;
</pre></b></font></p>
(If you use MCK, code should be another a bit, and in this case it is
possible to create and adjust the control at design-time, and at run-time
change its parent control. E.g. (Progress1 is created at run-time here too):
<p align=left><font face="Courier" color="008080"><b><pre>
 Progress1 := NewProgressBar( Form );
 Progress1.<a href="tcontrol.htm#parent"><font color="008080">Parent</font></a> := Form.StatusCtl;
</pre></b></font></p>
).
Do not forget to provide StatusCtl to be existing first (e.g. assign
one-space string to <a href=#simplestatustext target="main">SimpleStatusText</a> property of the form, for MCK do
so using Object Inspector).
</p>
<a name="sizegrip"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>SizeGrip</b></font>: <b>Boolean</b>;</font>
<br>
<a href=#size target="main">Size</a> grip for status bar. Has effect only before creating window.
</p>
<a name="statuspanelrightx"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>StatusPanelRightX</b></font>[ Idx: <b>Integer</b> ]: <b>Integer</b>;</font>
<br>
 <a name="form">
Use this property to adjust status panel right edges (if the status bar is
divided onto several subpanels). If the right edge for the last panel is
set to -1 (by default) it is expanded to the right edge of a form window.
Otherwise, status bar can be shorter then form width.
</p>
<a name="statuswindow"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>StatusWindow</b></font>: HWND;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="form">
Provided for case if You want to use API direct message sending to
status bar.
</p>
<a name="color1"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Color1</b></font>: TColor;</font>
<br>
 <a name="gradient">
<a href=#top target="main">Top</a> line color for GradientPanel.
</p>
<a name="color2"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Color2</b></font>: TColor;</font>
<br>
 <a name="gradient">
 <a name="3Dlabel">
Bottom line color for GradientPanel, or shadow color for LabelEffect.
(If clNone, shadow color for LabelEffect is calculated as a mix bitween
TextColor and clBlack).
</p>
<a name="gradientstyle"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>GradientStyle</b></font>: <a href=kol_pas.htm#tgradientstyle target="_top">TGradientStyle</a>;</font>
<br>
 <a name="gradient">
Styles other then gsVertical and gsHorizontal has effect only for
gradient panel, created by <a href=kol_pas.htm#newgradientpanelex target="_top">NewGradientPanelEx</a>.
</p>
<a name="gradientlayout"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>GradientLayout</b></font>: <a href=kol_pas.htm#tgradientlayout target="_top">TGradientLayout</a>;</font>
<br>
 <a name="gradient">
Has only effect for gradient panel, created by <a href=kol_pas.htm#newgradientpanelex target="_top">NewGradientPanelEx</a>.
Ignored for styles gsVertical and gsHorizontal.
</p>
<a name="imagelistsmall"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>ImageListSmall</b></font>: <a href=kol_pas.htm#pimagelist target="_top">PImageList</a>;</font>
<br>
 <a name="listview">
Image list with small icons used with List View control. If not set,
last added (i.e. created with a control as an owner) image list with
small icons is used.
</p>
<a name="imagelistnormal"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>ImageListNormal</b></font>: <a href=kol_pas.htm#pimagelist target="_top">PImageList</a>;</font>
<br>
 <a name="listview">
 <a name="treeview">
 <a name="tabcontrol">
 <a name="bitbtn">
Image list with normal size icons used with List View control (or with
icons for BitBtn, TreeView or TabControl). If not set,
last added (i.e. created with a control as an owner) image list is used.
</p>
<a name="imageliststate"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>ImageListState</b></font>: <a href=kol_pas.htm#pimagelist target="_top">PImageList</a>;</font>
<br>
 <a name="listview">
 <a name="treeview">
Image list used as a state images list for ListView or TreeView control.
</p>
<a name="pages"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Pages</b></font>[ Idx: <b>Integer</b> ]: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="tabcontrol">
Returns controls, which can be used as parent for controls, placed on
different pages of a tab control. Use it like in follows example:
 Label1 := NewLabel( TabControl1.Pages[ 0 ], 'Label1' );
To find number of pages available, check out <a href=#count target="main">Count</a> property of the tab
control. Pages are enumerated from 0 to <a href=#count target="main">Count</a> - 1, as usual.
</p>
<a name="tc_pages"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TC_Pages</b></font>[ Idx: <b>Integer</b> ]: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="tabcontrol">
The same as above.
</p>
<a name="tc_items"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TC_Items</b></font>[ Idx: <b>Integer</b> ]: KOLString;</font>
<br>
 <a name="tabcontrol">
<a href=#text target="main">Text</a>, displayed on tab control tabs.
</p>
<a name="tc_images"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TC_Images</b></font>[ Idx: <b>Integer</b> ]: <b>Integer</b>;</font>
<br>
 <a name="tabcontrol">
Image index for a tab in tab control.
</p>
<a name="tc_itemrect"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TC_ItemRect</b></font>[ Idx: <b>Integer</b> ]: TRect;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="tabcontrol">
Item rectangle for a tab in tab control.
</p>
<a name="lvstyle"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVStyle</b></font>: <a href=kol_pas.htm#tlistviewstyle target="_top">TListViewStyle</a>;</font>
<br>
 <a name="listview">
ListView style of view. Can be changed at run time.
</p>
<a name="lvoptions"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVOptions</b></font>: TListViewOptions;</font>
<br>
 <a name="listview">
ListView options. Can be changed at run time.
</p>
<a name="lvtextcolor"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVTextColor</b></font>: TColor;</font>
<br>
 <a name="listview">
ListView text color. Use it instead of Font.Color.
</p>
<a name="lvtextbkcolor"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVTextBkColor</b></font>: TColor;</font>
<br>
 <a name="listview">
ListView background color for text.
</p>
<a name="lvbkcolor"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVBkColor</b></font>: TColor;</font>
<br>
 <a name="listview">
ListView background color.  Use it instead of <a href=#color target="main">Color</a>.
</p>
<a name="lvcolcount"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVColCount</b></font>: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="listview">
ListView (additional) column count. Value 0 means that there are
no columns (single item text / icon is used). If You want
to provide several columns, first call <a href=#lvcoladd target="main">LVColAdd</a> to &quot;insert&quot; column 0,
i.e. to provide header text for first column (with index 0).
If there are no column, nothing will be shown in lvsDetail /
lvsDetailNoHeader view style.
</p>
<a name="lvcolwidth"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVColWidth</b></font>[ Item: <b>Integer</b> ]: <b>Integer</b>;</font>
<br>
 <a name="listview">
Retrieves or changes column width. For lvsList view style, the same width
is returned for all columns (ColIdx is ignored). It is possible to use
special values to assign to a property:
<br> LVSCW_AUTOSIZE - Automatically sizes the column
<br> LVSCW_AUTOSIZE_USEHEADER - Automatically sizes the column to fit
the header text
<br>
To set coumn width in lvsList view mode, column index must be -1
(and <a href=#width target="main">Width</a> to set must be in range 0..32767 always).
</p>
<a name="lvcoltext"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVColText</b></font>[ Idx: <b>Integer</b> ]: KOLString;</font>
<br>
 <a name="listview">
Allows to get/change column header text at run time.
</p>
<a name="lvcolalign"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVColAlign</b></font>[ Idx: <b>Integer</b> ]: <a href=kol_pas.htm#ttextalign target="_top">TTextAlign</a>;</font>
<br>
 <a name="listview">
Column text aligning.
</p>
<a name="lvcolimage"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVColImage</b></font>[ Idx: <b>Integer</b> ]: <b>Integer</b>;</font>
<br>
 <a name="listview">
Only starting from comctrl32.dll of version 4.70 (IE4+). Allows to
set an image for list view column itself from the <a href=#imagelistsmall target="main">ImageListSmall</a>.
</p>
<a name="lvcolorder"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVColOrder</b></font>[ Idx: <b>Integer</b> ]: <b>Integer</b>;</font>
<br>
 <a name="listview">
Only starting from comctrl32.dll of version 4.70 (IE4+). Allows to
set visual order of the list view column from the <a href=#imagelistsmall target="main">ImageListSmall</a>.
This value does not affect the index, by which the column is still
accessible in the column array.
</p>
<a name="lvcount"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVCount</b></font>: <b>Integer</b>;</font>
<br>
 <a name="listview">
Returns item count for ListView control. It is possible to use <a href=#count target="main">Count</a>
property instead when obtaining of item count is needed only. But this this
property allows also to set actual count of list view items when a list
view is virtual.
</p>
<a name="lvcuritem"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVCurItem</b></font>: <b>Integer</b>;</font>
<br>
 <a name="listview">
Returns first selected item index in a list view. See also <a href=#lvnextselected target="main">LVNextSelected</a>,
<a href=#lvnextitem target="main">LVNextItem</a> and <a href=#lvfocusitem target="main">LVFocusItem</a> functions.
</p>
<a name="lvfocusitem"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVFocusItem</b></font>: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="listview">
Returns focused item index in a list view. See also <a href=#lvcuritem target="main">LVCurItem</a>.
</p>
<a name="lvitemstate"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVItemState</b></font>[ Idx: <b>Integer</b> ]: TListViewItemState;</font>
<br>
 <a name="listview">
Access to list view item states set [lvisBlend, lvisHighlight, lvisFocus,
lvisSelect]. When assign new value to the property, it is possible to use
special index value -1 to change state for all items for a list view
(but only when lvoMultiselect style is applied to the list view, otherwise
index -1 is referring to the last item of the list view).
</p>
<a name="lvitemindent"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVItemIndent</b></font>[ Idx: <b>Integer</b> ]: <b>Integer</b>;</font>
<br>
Item indentation. Indentation is calculated as this value multiplied to
image list ImgWidth value (Image list must be applied to list view).
Note: indentation supported only if IE3.0 or higher installed.
</p>
<a name="lvitemstateimgidx"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVItemStateImgIdx</b></font>[ Idx: <b>Integer</b> ]: <b>Integer</b>;</font>
<br>
 <a name="listview">
Access to state image of the item. Use index -1 to assign the same state
image index to all items of the list view at once (fast).
Option lvoCheckBoxes just means, that control itself creates special inner
image list for two state images. Later it is possible to examine checked
state for items or set checked state programmatically by changing
LVItemStateImgIdx[ ] property. Value 1 corresponds to unchecked state,
2 to checked. Value 0 allows to remove checkbox at all. So, to check all
added items by default (e.g.), do following:
<p align=left><font face="Courier" color="008080"><b><pre>
 ListView1.LVItemStateImgIdx[ -1 ] := 2;
</pre></b></font></p>
<br>Use 1-based index of the image
in image list <a href=#imageliststate target="main">ImageListState</a>. Value 0 reserved to use as &quot;no state image&quot;.
Values 1..15 can be used only - this is the Windows restriction on
state images.
</p>
<a name="lvitemoverlayimgidx"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVItemOverlayImgIdx</b></font>[ Idx: <b>Integer</b> ]: <b>Integer</b>;</font>
<br>
 <a name="listview">
Access to overlay image of the item. Use index -1 to assign the same
overlay image to all items of the list view at once (fast).
</p>
<a name="lvitemdata"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVItemData</b></font>[ Idx: <b>Integer</b> ]: <b>DWORD</b>;</font>
<br>
 <a name="listview">
Access to user defined data, assiciated with the item of the list view.
</p>
<a name="lvselcount"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVSelCount</b></font>: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="listview">
Returns number of items selected in listview.
</p>
<a name="lvitemimageindex"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVItemImageIndex</b></font>[ Idx: <b>Integer</b> ]: <b>Integer</b>;</font>
<br>
 <a name="listview">
Image index of items in listview. When an item is created (using <a href=#lvitemadd target="main">LVItemAdd</a>
or <a href=#lviteminsert target="main">LVItemInsert</a>), image index 0 is set by default (not -1 like in VCL!).
</p>
<a name="lvitems"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVItems</b></font>[ Idx, Col: <b>Integer</b> ]: KOLString;</font>
<br>
 <a name="listview">
Access to List View item text.
</p>
<a name="lvitempos"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVItemPos</b></font>[ Idx: <b>Integer</b> ]: TPoint;</font>
<br>
 <a name="listview">
<a href=#position target="main">Position</a> of List View item (can be changed in icon or small icon view).
</p>
<a name="lvtopitem"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVTopItem</b></font>: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="listview">
Returns index of topmost visible item of ListView in lvsList view style.
</p>
<a name="lvperpage"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVPerPage</b></font>: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="listview">
Returns the number of fully-visible items if successful. If the current
view is icon or small icon view, the return value is the total number
of items in the list view control.
</p>
<a name="lvitemheight"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LVItemHeight</b></font>: <b>Integer</b>;</font>
<br>
 <a name="listview">
 <a name="listbox">
<table border=0>
</table>
</p>
<a name="tvselected"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVSelected</b></font>: THandle;</font>
<br>
 <a name="treeview">
Returns or sets currently selected item handle in tree view.
</p>
<a name="tvdrophilighted"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVDropHilighted</b></font>: THandle;</font>
<br>
 <a name="treeview">
Returns or sets item, which is currently highlighted as a drop target.
</p>
<a name="tvdrophilited"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVDropHilited</b></font>: THandle;</font>
<br>
The same as <a href=#tvdrophilighted target="main">TVDropHilighted</a>.
</p>
<a name="tvfirstvisible"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVFirstVisible</b></font>: THandle;</font>
<br>
 <a name="treeview">
Returns or sets given item to top of tree view.
</p>
<a name="tvindent"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVIndent</b></font>: <b>Integer</b>;</font>
<br>
 <a name="treeview">
The amount, in pixels, that child items are indented relative to their
parent items.
</p>
<a name="tvvisiblecount"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVVisibleCount</b></font>: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="treeview">
Returns number of fully (not partially) visible items in tree view.
</p>
<a name="tvroot"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVRoot</b></font>: THandle;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="treeview">
Returns handle of root item in tree view (or 0, if tree is empty).
</p>
<a name="tvitemchild"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemChild</b></font>[ Item: THandle ]: THandle;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="treeview">
Returns first child item for given one.
</p>
<a name="tvitemhaschildren"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemHasChildren</b></font>[ Item: THandle ]: <b>Boolean</b>;</font>
<br>
 <a name="treeview">
TRUE, if an Item has children. Set this value to true if you want to
force [+] sign appearing left from the node, even if there are no
subnodes added to the node yet.
</p>
<a name="tvitemchildcount"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemChildCount</b></font>[ Item: THandle ]: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="treeview">
Returns number of node child items in tree view.
</p>
<a name="tvitemnext"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemNext</b></font>[ Item: THandle ]: THandle;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="treeview">
Returns next sibling item handle for given one (or 0, if passed item is
the last child for its parent node).
</p>
<a name="tvitemprevious"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemPrevious</b></font>[ Item: THandle ]: THandle;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="treeview">
Returns previous sibling item (or 0, if the is no such item).
</p>
<a name="tvitemnextvisible"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemNextVisible</b></font>[ Item: THandle ]: THandle;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="treeview">
Returns next visible item (passed item must be visible too, to determine,
if it is really visible, use property <a href=#tvitemrect target="main">TVItemRect</a> or <a href=#tvitemvisible target="main">TVItemVisible</a>.
</p>
<a name="tvitempreviousvisible"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemPreviousVisible</b></font>[ Item: THandle ]: THandle;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="treeview">
Returns previous visible item.
</p>
<a name="tvitemparent"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemParent</b></font>[ Item: THandle ]: THandle;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="treeview">
Returns parent item for given one (or 0 for root item).
</p>
<a name="tvitemtext"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemText</b></font>[ Item: THandle ]: KOLString;</font>
<br>
 <a name="treeview">
<a href=#text target="main">Text</a> of tree view item.
</p>
<a name="tvitemrect"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemRect</b></font>[ Item: THandle; TextOnly: <b>Boolean</b> ]: TRect;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="treeview">
Returns rectangle, occupied by an item in tree view.
</p>
<a name="tvitemvisible"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemVisible</b></font>[ Item: THandle ]: <b>Boolean</b>;</font>
<br>
 <a name="treeview">
Returs True, if item is visible in tree view. It is also possible to
assign True to this property to ensure that a tree view item is visible
(if False is assigned, this does nothing).
</p>
<a name="tvrightclickselect"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVRightClickSelect</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="treeview">
Set this property to True to allow change selection to an item, clicked with right mouse button.
</p>
<a name="tvediting"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVEditing</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="treeview">
Returns True, if tree view control is editing its item label.
</p>
<a name="tvitembold"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemBold</b></font>[ Item: THandle ]: <b>Boolean</b>;</font>
<br>
 <a name="treeview">
True, if item is bold.
</p>
<a name="tvitemcut"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemCut</b></font>[ Item: THandle ]: <b>Boolean</b>;</font>
<br>
 <a name="treeview">
True, if item is selected as part of &quot;cut and paste&quot; operation.
</p>
<a name="tvitemdrophighlighted"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemDropHighlighted</b></font>[ Item: THandle ]: <b>Boolean</b>;</font>
<br>
 <a name="treeview">
True, if item is selected as drop target.
</p>
<a name="tvitemdrophilited"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemDropHilited</b></font>[ Item: THandle ]: <b>Boolean</b>;</font>
<br>
The same as <a href=#tvitemdrophighlighted target="main">TVItemDropHighlighted</a>.
</p>
<a name="tvitemexpanded"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemExpanded</b></font>[ Item: THandle ]: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="treeview">
True, if item's list of child items is currently expanded. To change
expanded state, use method <a href=#tvexpand target="main">TVExpand</a>.
</p>
<a name="tvitemexpandedonce"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemExpandedOnce</b></font>[ Item: THandle ]: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="treeview">
True, if item's list of child items has been expanded at least once.
</p>
<a name="tvitemselected"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemSelected</b></font>[ Item: THandle ]: <b>Boolean</b>;</font>
<br>
 <a name="treeview">
True, if item is selected.
</p>
<a name="tvitemimage"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemImage</b></font>[ Item: THandle ]: <b>Integer</b>;</font>
<br>
 <a name="treeview">
Image index for an item of tree view. To tell that there are no image
set, use index -2 (value -1 is reserved for callback image).
</p>
<a name="tvitemselimg"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemSelImg</b></font>[ Item: THandle ]: <b>Integer</b>;</font>
<br>
 <a name="treeview">
Image index for an item of tree view in selected state. Use value -2 to
provide no image, -1 used for callback image.
</p>
<a name="tvitemoverlay"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemOverlay</b></font>[ Item: THandle ]: <b>Integer</b>;</font>
<br>
 <a name="treeview">
Overlay image index for an item in tree view.
Values 1..15 can be used only - this is the Windows restriction on
overlay images.
</p>
<a name="tvitemstateimg"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemStateImg</b></font>[ Item: THandle ]: <b>Integer</b>;</font>
<br>
 <a name="treeview">
State image index for an item in tree view. Use 1-based index of the image
in image list <a href=#imageliststate target="main">ImageListState</a>. Value 0 reserved to use as &quot;no state image&quot;.
</p>
<a name="tvitemdata"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TVItemData</b></font>[ Item: THandle ]: <b>Pointer</b>;</font>
<br>
 <a name="treeview">
Stores any program-defined pointer with the item.
</p>
<a name="curitem"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>CurItem</b></font>: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="toolbar">
For toolbar, in <a href=#onclick target="main">OnClick</a> event this property can be used to determine
which button was clicked (100-based button id in toolbar). It is also
possible to use <a href=#curindex target="main">CurIndex</a> property (zero-based) for this purpose as
well, but do not assume, that CurItem always equal to <a href=#curindex target="main">CurIndex</a>+100.
At least, it is possible to call <a href=#tbitem2index target="main">TBItem2Index</a> function to convert
button ID to its index in toolbar.
</p>
<a name="tbbuttoncount"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TBButtonCount</b></font>: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="toolbar">
Returns count of buttons on toolbar. The same as <a href=#count target="main">Count</a>.
</p>
<a name="tbbtnimgwidth"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TBBtnImgWidth</b></font>: <b>Integer</b>;</font>
<br>
 <a name="toolbar">
Custom toolbar buttons width. Set it before assigning buttons bitmap.
Changing this property after assigning the bitmap has no effect.
</p>
<a name="tbbuttonenabled"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TBButtonEnabled</b></font>[ BtnID: <b>Integer</b> ]: <b>Boolean</b>;</font>
<br>
 <a name="toolbar">
Obvious.
</p>
<a name="tbbuttonvisible"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TBButtonVisible</b></font>[ BtnID: <b>Integer</b> ]: <b>Boolean</b>;</font>
<br>
 <a name="toolbar">
Allows to hide/show some of toolbar buttons.
</p>
<a name="tbbuttonchecked"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TBButtonChecked</b></font>[ BtnID: <b>Integer</b> ]: <b>Boolean</b>;</font>
<br>
 <a name="toolbar">
Allows to determine 'checked' state of a button (e.g., radio-button),
and to check it programmatically.
</p>
<a name="tbbuttonmarked"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TBButtonMarked</b></font>[ BtnID: <b>Integer</b> ]: <b>Boolean</b>;</font>
<br>
 <a name="toolbar">
Returns True if toolbar button is marked (highlighted). Allows to
highlight buttons assigning True to this value.
</p>
<a name="tbbuttonpressed"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TBButtonPressed</b></font>[ BtnID: <b>Integer</b> ]: <b>Boolean</b>;</font>
<br>
 <a name="toolbar">
Allows to detrmine if toolbar button (given by its command ID) pressed,
and press/unpress it programmatically.
</p>
<a name="tbbuttontext"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TBButtonText</b></font>[ BtnID: <b>Integer</b> ]: KOLString;</font>
<br>
 <a name="toolbar">
Obtains toolbar button text and allows to change it. Be sure that text
is not empty for all buttons, if You want for it to be shown (if at least
one button has empty text, no text labels will be shown at all). At
least set it to ' ' for buttons, which You do not want to show labels,
if You want from other ones to have it.
</p>
<a name="tbbuttonimage"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TBButtonImage</b></font>[ BtnID: <b>Integer</b> ]: <b>Integer</b>;</font>
<br>
 <a name="toolbar">
Allows to access/change button image. Do not read this property for
separator buttons, returning value is not proper. If you do not know,
is the button a separator, using function below.
</p>
<a name="tbbuttonrect"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TBButtonRect</b></font>[ BtnID: <b>Integer</b> ]: TRect;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="toolbar">
Obtains rectangle occupied by toolbar button in toolbar window.
(It is not possible to obtain rectangle for buttons, currently
not visible). See also function <a href=kol_pas.htm#toolbarbuttonrect target="_top">ToolbarButtonRect</a>.
</p>
<a name="tbbuttonwidth"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TBButtonWidth</b></font>[ BtnID: <b>Integer</b> ]: <b>Integer</b>;</font>
<br>
 <a name="toolbar">
Allows to obtain / change toolbar button width.
</p>
<a name="tbbuttonlparam"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TBButtonLParam</b></font>[ <b>const</b> Idx: <b>Integer</b> ]: <b>DWORD</b>;</font>
<br>
 <a name="toolbar">
Allows to access/change LParam. Dufa
</p>
<a name="tbbuttonsminwidth"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TBButtonsMinWidth</b></font>: <b>Integer</b>;</font>
<br>
 <a name="toolbar">
Allows to set minimal width for all toolbar buttons.
</p>
<a name="tbbuttonsmaxwidth"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TBButtonsMaxWidth</b></font>: <b>Integer</b>;</font>
<br>
 <a name="toolbar">
Allows to set maximal width for all toolbar buttons.
</p>
<a name="tbrows"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TBRows</b></font>: <b>Integer</b>;</font>
<br>
 <a name="toolbar">
Returns number of rows for toolbar and allows to try to set
desired number of rows (but system can set another number of
rows in some cases). This property has no effect if tboWrapable
style not present in Options when toolbar is created.
</p>
<a name="maxtextsize"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>MaxTextSize</b></font>: <b>DWORD</b>;</font>
<br>
 <a name="richedit">
This property valid also for simple edit control, not only for RichEdit.
But for usual edit control, maximum text size available is 32K. For
RichEdit, limit is 4Gb. By default, RichEdit is limited to
32767 bytes (to set maximum size available to 2Gb, assign MaxInt value
to a property). Also, to get current text size of RichEdit, use property
<a href=#textsize target="main">TextSize</a> or <a href=#re_textsize target="main">RE_TextSize</a>[ ].
</p>
<a name="textsize"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>TextSize</b></font>: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="richedit">
Common for edit and rich edit controls property, which returns size of
text in edit control. Also, for any other control (or form, or applet
window) returns size (in characters) of <a href=#caption target="main">Caption</a> or <a href=#text target="main">Text</a> (what is, the
same property actually).
</p>
<a name="re_textsize"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_TextSize</b></font>[ Units: <a href=kol_pas.htm#trichtextsize target="_top">TRichTextSize</a> ]: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="richedit">
For RichEdit control, it returns text size, measured in desired units
(rtsChars - characters, including OLE objects, counted as a single
character; rtsBytes - presize length of text image (if it would be stored
in file or stream). Please note, that for RichEdit1.0, only size in
characters can be obtained.
</p>
<a name="re_charfmtarea"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_CharFmtArea</b></font>: <a href=kol_pas.htm#trichfmtarea target="_top">TRichFmtArea</a>;</font>
<br>
 <a name="richedit">
By default, this property is raSelection. Changing it, You determine in
for which area characters format is applyed, when changing
character formatting properties below (not paragraph formatting).
</p>
<a name="re_charformat"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_CharFormat</b></font>: TCharFormat;</font>
<br>
 <a name="richedit">
In differ to follow properties, which allow to control certain formatting
attributes, this property provides low level access for formatting current
character area (see <a href=#re_charfmtarea target="main">RE_CharFmtArea</a>). It returns TCharFormat structure,
filled in with formatting attributes, and by assigning another value to
this property You can change desired attributes as You wish. Even if
RichEdit1.0 is used, TCharFormat2 is returned (but extended fields are
ignored for RichEdit1.0).
</p>
<a name="re_font"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_Font</b></font>: <a href=kol_pas.htm#pgraphictool target="_top">PGraphicTool</a>;</font>
<br>
 <a name="richedit">
<a href=#font target="main">Font</a> of the first character in current selection (when retrieve).
When set (or subproperties of RE_Font are set), all font attributes are
applied to entire
<a href=#RE_CharFmtArea target=main>area</a>
. To apply only needed attributes, use another
properties: <a href=#re_fmtbold target="main">RE_FmtBold</a>, <a href=#re_fmtitalic target="main">RE_FmtItalic</a>, <a href=#re_fmtstrikeout target="main">RE_FmtStrikeout</a>, <a href=#re_fmtunderline target="main">RE_FmtUnderline</a>,
RE_FmtName, etc.
<br>
Note, that font size is measured in twips, which is about 1/10 of pixel.
</p>
<a name="re_fmtbold"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtBold</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
Formatting flag. When retrieve, returns True, if fsBold style RE_Font.FontStyle
is valid for a first character in the selection. When set, changes fsBold
style (True - set, False - reset) for all characters in
<a href=#RE_CharFmtArea target=main>area</a>
.
</p>
<a name="re_fmtboldvalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtBoldValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="re_fmtitalic"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtItalic</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
Formatting flag. Like <a href=#re_fmtbold target="main">RE_FmtBold</a>, when retrieving, shows, is fsItalic
style valid for the first character of the selection, and when set, changes
only fsItalic style for an
<a href=#RE_CharFmtArea target=main>area</a>
.
</p>
<a name="re_fmtitalicvalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtItalicValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="re_fmtstrikeout"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtStrikeout</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
Formatting flag. Like <a href=#re_fmtbold target="main">RE_FmtBold</a>, when retrieving, shows, is fsStrikeout
style valid for the first selected character, and when set, changes only
fsStrikeout style for an
<a href=#RE_CharFmtArea target=main>area</a>
.
</p>
<a name="re_fmtstrikeoutvalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtStrikeoutValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="re_fmtunderline"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtUnderline</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
Formatting flag. Like <a href=#re_fmtbold target="main">RE_FmtBold</a>, when retrieving, shows, is fsUnderline
style valid for the first selected character, and when set, changes
fsUnderline style for an
<a href=#RE_CharFmtArea target=main>area</a>
.
</p>
<a name="re_fmtunderlinevalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtUnderlineValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="re_fmtunderlinestyle"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtUnderlineStyle</b></font>: <a href=kol_pas.htm#trichunderline target="_top">TRichUnderline</a>;</font>
<br>
 <a name="richedit">
Extended underline style. To check, if this property is valid for
entire selection, examine <a href=#re_fmtunderlinevalid target="main">RE_FmtUnderlineValid</a> value.
</p>
<a name="re_fmtprotected"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtProtected</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
Formatting flag. When retrieving, shows, is the first character of the selection
is protected from changing it by user (True) or not (False). To get know,
if retrived value is valid for entire selection, check the property
<a href=#re_fmtprotectedvalid target="main">RE_FmtProtectedValid</a>. When set, makes all characters in
<a href=#RE_CharFmtArea target=main>area</a>
protected (
True) or not (False).
</p>
<a name="re_fmtprotectedvalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtProtectedValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="richedit">
True, if property <a href=#re_fmtprotected target="main">RE_FmtProtected</a> is valid for entire selection, when
retrieving it.
</p>
<a name="re_fmthidden"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtHidden</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
For RichEdit3.0, makes text hidden (not displayed).
</p>
<a name="re_fmthiddenvalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtHiddenValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="richedit">
Returns True, if <a href=#re_fmthidden target="main">RE_FmtHidden</a> style is valid for entire selection.
</p>
<a name="re_fmtlink"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtLink</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
Returns True, if the first selected character is a part of link (URL).
</p>
<a name="re_fmtlinkvalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtLinkValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="re_fmtfontsize"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtFontSize</b></font>: <b>Integer</b> index( 12 shl 16 ) or CFM_SIZE;</font>
<br>
 <a name="richedit">
Formatting value: font size, in twips (1/1440 of an inch, or 1/20 of a
printer's point, or about 1/10 of pixel). When retrieving, returns
RE_Font.FontHeight.
When set, changes font size for entire
<a href=#RE_CharFmtArea target=main>area</a>
(but does not change
other font attributes).
</p>
<a name="re_fmtfontsizevalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtFontSizeValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="richedit">
Returns True, if property <a href=#re_fmtfontsize target="main">RE_FmtFontSize</a> is valid for entire selection,
when retrieving it.
</p>
<a name="re_fmtautobackcolor"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtAutoBackColor</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
True, when automatic back color is used.
</p>
<a name="re_fmtautobackcolorvalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtAutoBackColorValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="re_fmtfontcolor"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtFontColor</b></font>: <b>Integer</b> index( 20 shl 16 ) or CFM_COLOR;</font>
<br>
 <a name="richedit">
Formatting value (font color). When retrieving, returns RE_Font.Color.
When set, changes font color for entire
<a href=#RE_CharFmtArea target=main>area</a>
(but does not change
other font attributes).
</p>
<a name="re_fmtfontcolorvalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtFontColorValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="richedit">
Returns True, if property <a href=#re_fmtfontcolor target="main">RE_FmtFontColor</a> valid for entire selection,
when retrieving it.
</p>
<a name="re_fmtautocolor"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtAutoColor</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
True, when automatic text color is used (in such case, <a href=#re_fmtfontcolor target="main">RE_FmtFontColor</a>
assignment is ignored for current area).
</p>
<a name="re_fmtautocolorvalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtAutoColorValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="re_fmtbackcolor"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtBackColor</b></font>: <b>Integer</b> index(( 64 + 32 ) shl 16 ) or CFM_BACKCOLOR;</font>
<br>
 <a name="richedit">
Formatting value (back color). Only available for Rich Edit 2.0 and higher.
When set, changes background color for entire
<a href=#RE_CharFmtArea target=main>area</a>
(but does not change
other font attributes).
</p>
<a name="re_fmtbackcolorvalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtBackColorValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="re_fmtfontoffset"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtFontOffset</b></font>: <b>Integer</b> index( 16 shl 16 ) or CFM_OFFSET;</font>
<br>
 <a name="richedit">
Formatting value (font vertical offset from baseline, positive values
correspond to subscript). When retrieving, returns offset for first
character in the selection. When set, changes font offset for entire
<a href=#RE_CharFmtArea target=main>area</a>
. To get know, is retrieved value valid for entire selction,
check <a href=#re_fmtfontoffsetvalid target="main">RE_FmtFontOffsetValid</a> property.
</p>
<a name="re_fmtfontoffsetvalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtFontOffsetValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="richedit">
Returns True, if property <a href=#re_fmtfontoffset target="main">RE_FmtFontOffset</a> is valid for entire selection,
when retrieving it.
</p>
<a name="re_fmtfontcharset"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtFontCharset</b></font>: <b>Integer</b> index( 25 shl 16 ) or CFM_CHARSET;</font>
<br>
 <a name="richedit">
Returns charset for first character in current selection, when retrieved
(and to get know, if this value is valid for entire selection, check
property <a href=#re_fmtfontcharsetvalid target="main">RE_FmtFontCharsetValid</a>). When set, changes charset for all
characters in
<a href=#RE_CharFmtArea target=main>area</a>
, but does not alter other formatting attributes.
</p>
<a name="re_fmtfontcharsetvalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtFontCharsetValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="richedit">
Returns True, only if rerieved property <a href=#re_fmtfontcharset target="main">RE_FmtFontCharset</a> is valid for
entire selection.
</p>
<a name="re_fmtfontname"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtFontName</b></font>: KOLString;</font>
<br>
 <a name="richedit">
Returns font face name for first character in the selection, when retrieved,
and sets font name for entire
<a href=#RE_CharFmtArea target=main>area</a>
, wnen assigned to (without
changing of other formatting attributes). To get know, if retrived
font name valid for entire selection, examine property <a href=#re_fmtfontnamevalid target="main">RE_FmtFontNameValid</a>.
</p>
<a name="re_fmtfontnamevalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_FmtFontNameValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="richedit">
Returns True, only if the font name is the same for entire selection,
thus is, if rerieved property value <a href=#re_fmtfontname target="main">RE_FmtFontName</a> is valid for entire
selection.
</p>
<a name="re_parafmt"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_ParaFmt</b></font>: TParaFormat;</font>
<br>
 <a name="richedit">
Allows to retrieve or set paragraph formatting attributes for currently
selected paragraph(s) in RichEdit control. See also following properties,
which allow to do the same for certain paragraph format attributes
separately.
</p>
<a name="re_textalign"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_TextAlign</b></font>: <a href=kol_pas.htm#trichtextalign target="_top">TRichTextAlign</a>;</font>
<br>
 <a name="richedit">
Returns text alignment for current selection and allows to change it
(without changing other formatting attributes).
</p>
<a name="re_textalignvalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_TextAlignValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="richedit">
Returns True, if property <a href=#re_textalign target="main">RE_TextAlign</a> is valid for entire selection. If
False, it is concerning only start of selection.
</p>
<a name="re_numbering"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_Numbering</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
Returns True, if selected text is numbered (or has style of list with
bullets). To get / change numbering style, see properties
<a href=#re_numstyle target="main">RE_NumStyle</a> and <a href=#re_numbrackets target="main">RE_NumBrackets</a>.
</p>
<a name="re_numstyle"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_NumStyle</b></font>: <a href=kol_pas.htm#trichnumbering target="_top">TRichNumbering</a>;</font>
<br>
 <a name="richedit">
Advanced numbering style, such as rnArabic etc. If You use it, do not
change <a href=#re_numbering target="main">RE_Numbering</a> property simultaneously - this can cause changing
style to rnBullets only.
</p>
<a name="re_numstart"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_NumStart</b></font>: <b>Integer</b>;</font>
<br>
 <a name="richedit">
Starting number for advanced numbering style. If this property is not
set, numbering is starting by default from 0. For rnLRoman and rnURoman
this cause, that first item has no number to be shown (ancient Roman
people did not invent '0').
</p>
<a name="re_numbrackets"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_NumBrackets</b></font>: <a href=kol_pas.htm#trichnumbrackets target="_top">TRichNumBrackets</a>;</font>
<br>
 <a name="richedit">
Brackets style for advanced numbering. rnbPlain is default
brackets style, and every time, when <a href=#re_numstyle target="main">RE_NumStyle</a> is changed,
RE_NumBrackets is reset to rnbPlain.
</p>
<a name="re_numtab"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_NumTab</b></font>: <b>Integer</b>;</font>
<br>
 <a name="richedit">
Tab between start of number and start of paragraph text. If too small too
view number, number is not displayed. (Default value seems to be sufficient
though).
</p>
<a name="re_numberingvalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_NumberingValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="richedit">
Returns True, if <a href=#re_numbering target="main">RE_Numbering</a>, <a href=#re_numstyle target="main">RE_NumStyle</a>, <a href=#re_numbrackets target="main">RE_NumBrackets</a>, <a href=#re_numtab target="main">RE_NumTab</a>,
<a href=#re_numstart target="main">RE_NumStart</a> properties are valid for entire selection.
</p>
<a name="re_level"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_Level</b></font>: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="richedit">
Outline level (for numbering paragraphs?). Read only.
</p>
<a name="re_spacebefore"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_SpaceBefore</b></font>: <b>Integer</b>;</font>
<br>
 <a name="richedit">
Spacing before paragraph.
</p>
<a name="re_spacebeforevalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_SpaceBeforeValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="richedit">
True, if <a href=#re_spacebefore target="main">RE_SpaceBefore</a> value is valid for all selected paragraph (if
False, this value is valid only for first paragraph.
</p>
<a name="re_spaceafter"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_SpaceAfter</b></font>: <b>Integer</b>;</font>
<br>
 <a name="richedit">
Spacing after paragraph.
</p>
<a name="re_spaceaftervalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_SpaceAfterValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="richedit">
True, only if <a href=#re_spaceafter target="main">RE_SpaceAfter</a> value is valid for all selected paragraphs.
</p>
<a name="re_linespacing"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_LineSpacing</b></font>: <b>Integer</b>;</font>
<br>
 <a name="richedit">
Linespacing in paragraph (this value is based on <a href=#re_spacingrule target="main">RE_SpacingRule</a> property).
</p>
<a name="re_spacingrule"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_SpacingRule</b></font>: <b>Integer</b>;</font>
<br>
 <a name="richedit">
Linespacing rule. Do not know what is it.
</p>
<a name="re_linespacingvalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_LineSpacingValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="richedit">
True, only if <a href=#re_linespacing target="main">RE_LineSpacing</a> and <a href=#re_spacingrule target="main">RE_SpacingRule</a> values are valid for
entire selection.
</p>
<a name="re_indent"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_Indent</b></font>: <b>Integer</b> index( 20 shl 16 ) or PFM_OFFSET;</font>
<br>
 <a name="richedit">
Returns left indentation for paragraph in current selection and allows
to change it (without changing other formatting attributes).
</p>
<a name="re_indentvalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_IndentValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="richedit">
Returns True, if <a href=#re_indent target="main">RE_Indent</a> property is valid for entire selection.
</p>
<a name="re_startindent"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_StartIndent</b></font>: <b>Integer</b> index( 12 shl 16 ) or PFM_STARTINDENT;</font>
<br>
 <a name="richedit">
Returns left indentation for first line in paragraph for current
selection, and allows to change it (without changing other formatting
attributes).
</p>
<a name="re_startindentvalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_StartIndentValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="richedit">
Returns True, if property <a href=#re_startindent target="main">RE_StartIndent</a> is valid for entire selection.
</p>
<a name="re_rightindent"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_RightIndent</b></font>: <b>Integer</b> index( 16 shl 16 ) or PFM_RIGHTINDENT;</font>
<br>
 <a name="richedit">
Returns right indent for paragraph in current selection, and allow to
change it (without changing other formatting attributes).
</p>
<a name="re_rightindentvalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_RightIndentValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="richedit">
Returns True, if property <a href=#re_rightindent target="main">RE_RightIndent</a> is valid for entire selection only.
</p>
<a name="re_tabcount"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_TabCount</b></font>: <b>Integer</b>;</font>
<br>
 <a name="richedit">
Number of tab stops in current selection. This value can not be set greater
then MAX_TAB_COUNT (32).
</p>
<a name="re_tabs"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_Tabs</b></font>[ Idx: <b>Integer</b> ]: <b>Integer</b>;</font>
<br>
 <a name="richedit">
Tab stops for RichEdit control.
</p>
<a name="re_tabsvalid"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_TabsValid</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="richedit">
Returns True, if properties <a href=#re_tabs target="main">RE_Tabs</a>[ ] and <a href=#re_tabcount target="main">RE_TabCount</a> are valid for
entire selection.
</p>
<a name="re_autokeyboard"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_AutoKeyboard</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
True if autokeyboard on (lovely &quot;feature&quot; of automatic switching keyboard
language when caret is over another language text). For older RichEdit,
is 'on' always, for newest - 'off' by default.
</p>
<a name="re_autofont"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_AutoFont</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
True if autofont on (automatic switching font when keyboard layout is
changes). By default, is 'on' always. It is suggested to turn this option
off for Unicode control.
</p>
<a name="re_autofontsizeadjust"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_AutoFontSizeAdjust</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
See IMF_AUTOFONTSIZEADJUST option in SDK:
<a href=#font target="main">Font</a>-bound font sizes are scaled from insertion point size according to
script. For example, Asian fonts are slightly larger than Western ones.
This option is turned on by default.
</p>
<a name="re_dualfont"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_DualFont</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
See IMF_DUALFONT option in SDK:
Sets the control to dual-font mode. Used for Asian language support.
The control uses an English font for ASCII text and a Asian font for
Asian text.
</p>
<a name="re_uifonts"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_UIFonts</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
See IMF_UIFONTS option in SDK:
Use user-interface default fonts. This option is turned off by default.
</p>
<a name="re_imecancelcomplete"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_IMECancelComplete</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
See IMF_IMECANCELCOMPLETE option in SDK:
This flag determines how the control uses the composition string of an
IME if the user cancels it. If this flag is set, the control discards
the composition string. If this flag is not set, the control uses the
composition string as the result string.
</p>
<a name="re_imealwayssendnotify"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_IMEAlwaysSendNotify</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
See IMF_IMEALWAYSSENDNOTIFY option in SDK:
Controls how Rich Edit notifies the client during IME composition:
<br>
0: No EN_CHANGED or EN_SELCHANGE notifications during undetermined state.
Send notification when final string comes in. (default)
<br>
1: Send EN_CHANGED and EN_SELCHANGE events during undetermined state.
</p>
<a name="re_overwritemode"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_OverwriteMode</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
This property allows to control insert/overwrite mode. First, to examine, if
insert or overwrite mode is current (but it is necessary either to
access this property, at least once, immediately after creating RichEdit
control, or to assign event <a href=#onre_insovrmode_change target="main">OnRE_InsOvrMode_Change</a> to your handler).
Second, to set desired mode programmatically - by assigning value to
this property (You also have to initialize monitoring procedure by either
reading RE_OverwriteMode property or assigning handler to event
<a href=#onre_insovrmode_change target="main">OnRE_InsOvrMode_Change</a> immediately following RichEdit control creation).
</p>
<a name="re_disableoverwritechange"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_DisableOverwriteChange</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
It is possible to disable switching between &quot;insert&quot; and &quot;overwrite&quot; mode
by user (therefore, event <a href=#onre_insovrmode_change target="main">OnRE_InsOvrMode_Change</a> continue works, but it
just called when key INSERT is pressed, though <a href=#re_overwritemode target="main">RE_OverwriteMode</a> property
is not actually changed if switching is disabled).
</p>
<a name="re_text"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_Text</b></font>[ <a href=kol_pas.htm#format target="_top">Format</a>: <a href=kol_pas.htm#tretextformat target="_top">TRETextFormat</a>; SelectionOnly: <b>Boolean</b> ]: KOLString;</font>
<br>
 <a name="richedit">
This property allows to get / replace content of RichEdit control
(entire text or selection only). Using different formats, it is
possible to exclude or replace undesired formatting information
(see <a href=kol_pas.htm#tretextformat target="_top">TRETextFormat</a> specification). To get or replace entire text
in reText mode (plain text only), it is possible to use habitual
for edit controls <a href=#text target="main">Text</a> property.
<br>&nbsp;&nbsp;&nbsp;
Note: it is possible to append text to the end of RichEdit control
using method <a href=#add target="main">Add</a>, but only if property RE_Text is accessed at least
once:
<p align=left><font face="Courier" color="008080"><b><pre>
               RichEdit1.RE_Text[ reText, True ];
</pre></b></font></p>
</p>
<a name="re_error"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_Error</b></font>: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="richedit">
Contains error code, if access to <a href=#re_text target="main">RE_Text</a> failed.
</p>
<a name="re_autourldetect"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_AutoURLDetect</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
If set to True, automatically detects URLs (and highlights it with
blue color, applying fsItalic and fsUnderline font styles (while
typing and loading). Default value is False. Note: if event <a href=#onre_urlclick target="main">OnRE_URLClick</a>
or event <a href=#onre_overurl target="main">OnRE_OverURL</a> are set, property RE_AutoURLDetect is set to True
automatically.
</p>
<a name="re_url"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_URL</b></font>: KOLString;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#209;</font>&nbsp;&nbsp;&nbsp;
<br>
 <a name="richedit">
Detected URL (valid in <a href=#onre_overurl target="main">OnRE_OverURL</a> and <a href=#onre_urlclick target="main">OnRE_URLClick</a> event handlers).
</p>
<a name="re_transparent"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_Transparent</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
Use this property to make richedit control transparent, instead of
<a href=#ed_transparent target="main">Ed_Transparent</a> or <a href=#transparent target="main">Transparent</a>. But do not place such transparent
richedit control directly on form - it can be draw incorrectly when
form is activated and rich editr control is not current active control.
Use at least panel as a parent instead.
</p>
<a name="re_zoom"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>RE_Zoom</b></font>: TSmallPoint;</font>
<br>
 <a name="richedit">
To set zooming for rich edit control (3.0 and above), pass X as numerator
and Y as denominator. Resulting X/Y must be between 1/64 and 64.
</p>
<a name="datetime"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>DateTime</b></font>: TDateTime;</font>
<br>
DateTime for DateTimePicker control only.
</p>
<a name="date"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Date</b></font>: TDateTime;</font>
<br>
Date only for DateTimePicker control only.
</p>
<a name="time"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Time</b></font>: TDateTime;</font>
<br>
Time only for DateTimePicker control only.
</p>
<a name="systemtime"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>SystemTime</b></font>: TSystemTime;</font>
<br>
<a href=kol_pas.htm#date target="_top">Date</a> and <a href=#time target="main">Time</a> as TSystemTime. When assing, use year 0 to set &quot;no value&quot;.
</p>
<a name="datetimerange"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>DateTimeRange</b></font>: TDateTimeRange;</font>
<br>
DateTimePicker range. If first date in the agrument assigned is NAN,
minimum system allowed value is used as the left bound, and if the second is
NAN, maximum system allowed is used as the right one.
</p>
<a name="sbmin"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>SBMin</b></font>: Longint;</font>
<br>
Minimum scrolling area position.
</p>
<a name="sbmax"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>SBMax</b></font>: Longint;</font>
<br>
Maximum scrolling area position (size of the text or image to be scrolling).
For case when SCROLL_OLD defined, this value should be set as scrolling
object size without <a href=#sbpagesize target="main">SBPageSize</a>.
</p>
<a name="sbminmax"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>SBMinMax</b></font>: TPoint;</font>
<br>
The property to adjust <a href=#sbmin target="main">SBMin</a> and <a href=#sbmax target="main">SBMax</a> for a single call (set X to a minimum
and Y to a maximum value).
</p>
<a name="sbposition"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>SBPosition</b></font>: <b>Integer</b>;</font>
<br>
Current scroll position. When set, should be between <a href=#sbmin target="main">SBMin</a> and
<a href=#sbmax target="main">SBMax</a> - max(0, <a href=#sbpagesize target="main">SBPageSize</a>-1)
</p>
<a name="sbpagesize"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>SBPageSize</b></font>: <b>Integer</b>;</font>
<br>
</p>
<a name="checked"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Checked</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="checkbox">
 <a name="radiobox">
For checkbox and radiobox - if it is checked. Do not assign
value for radiobox - use <a href=#setradiochecked target="main">SetRadioChecked</a> instead.
</p>
<a name="check3"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>Check3</b></font>: TTriStateCheck;</font>
<br>
 <a name="checkbox">
State of checkbox with BS_AUTO3STATE style.
</p>
<a name="customdata"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>CustomData</b></font>: <b>Pointer</b>;</font>
<br>
Can be used to exend the object when new type of control added. Memory,
pointed by this pointer, released automatically in the destructor.
</p>
<a name="customobj"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>CustomObj</b></font>: <a href=kol_pas.htm#pobj target="_top">PObj</a>;</font>
<br>
Can be used to exend the object when new type of control added. Object,
pointed by this pointer, released automatically in the destructor.
</p>
<a name="lbtopindex"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>LBTopIndex</b></font>: <b>Integer</b>;</font>
<br>
 <a name="listbox">
Index of the first visible item in a list box
</p>
<h4 align="center"><font color="black">Properties, inherited from <a href="tobj.htm" target="_top">TObj</a></font></h4>
<h3 align="center"><font color="#FF8080">TControl methods</font></h3>
<a name="init"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>Init</b></font>; <b>virtual</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="initparented"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>InitParented</b></font>( AParent: <a href=kol_pas.htm#pcontrol target="_top">PControl</a> ); <b>virtual</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Initialization of visual object.
</p>
<a name="initorthaned"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>InitOrthaned</b></font>( AParentWnd: HWnd ); <b>virtual</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Initialization of visual object.
</p>
<a name="initparented"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>InitParented</b></font>( AParent: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>; widget: PGtkWidget; need_eventbox: <b>Boolean</b> ); <b>virtual</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Initialization of visual object.
</p>
<a name="destroychildren"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>DestroyChildren</b></font>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Destroys children. Is called in destructor, and can be
called in descending classes as earlier as needed to
prevent problems of too late destroying of visuals.
<br>
Note: since v 2.40, used only for case when a symbol NOT_USE_AUTOFREE4CONTROLS
is defined, otherwise all children are destroyed using common mechanism of
<a href=#add2autofree target="main">Add2AutoFree</a>.
</p>
<a name="getparentwnd"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>GetParentWnd</b></font>( NeedHandle: <b>Boolean</b> ): HWnd;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Returns handle of parent window.
</p>
<a name="getparentwindow"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>GetParentWindow</b></font>: HWnd;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="setenabled"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>SetEnabled</b></font>( Value: <b>Boolean</b> );</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Changes <a href=#enabled target="main">Enabled</a> property value. Overriden here to change enabling
status of a window.
</p>
<a name="getenabled"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>GetEnabled</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Returns True, if <a href=#enabled target="main">Enabled</a>. Overriden here to obtain real window
state.
</p>
<a name="setvisible"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>SetVisible</b></font>( Value: <b>Boolean</b> );</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Sets <a href=#visible target="main">Visible</a> property value. Overriden here to change visibility
of correspondent window.
</p>
<a name="set_visible"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>Set_Visible</b></font>( Value: <b>Boolean</b> );</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="getvisible"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>GetVisible</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Returns True, if correspondent window is <a href=#visible target="main">Visible</a>. Overriden
to get visibility of real window, not just value stored in object.
</p>
<a name="get_visible"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>Get_Visible</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Returns True, if correspondent window is <a href=#visible target="main">Visible</a>, for forms and applet,
or if fVisible flag is set, for controls.
</p>
<a name="setctlcolor"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>SetCtlColor</b></font>( Value: TColor );</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Sets TControl's <a href=#color target="main">Color</a> property value.
</p>
<a name="setboundsrect"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>SetBoundsRect</b></font>( <b>const</b> Value: TRect );</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Sets BoudsRect property value.
</p>
<a name="getboundsrect"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>GetBoundsRect</b></font>: TRect;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Returns bounding rectangle.
</p>
<a name="geticon"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>GetIcon</b></font>: HIcon;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Returns <a href=#icon target="main">Icon</a> property. By default, if it is not set,
returns <a href=#icon target="main">Icon</a> property of an <a href=kol_pas.htm#applet target="_top">Applet</a>.
</p>
<a name="createsubclass"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>CreateSubclass</b></font>( <b>var</b> Params: <a href=kol_pas.htm#tcreateparams target="_top">TCreateParams</a>; ControlClassName: PKOLChar );</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Can be used in descending classes to subclass window with given
standard Windows ControlClassName - must be called after
creating Params but before <a href=#createwindow target="main">CreateWindow</a>. Usually it is called
in overriden method CreateParams after calling of the inherited one.
</p>
<a name="updatewndstyles"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>UpdateWndStyles</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Updates fStyle, fExStyle, fClsStyle from window handle
</p>
<a name="setonchar"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>SetOnChar</b></font>( <b>const</b> Value: <a href=kol_pas.htm#tonchar target="_top">TOnChar</a> );</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="setondeadchar"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>SetOnDeadChar</b></font>( <b>const</b> Value: <a href=kol_pas.htm#tonchar target="_top">TOnChar</a> );</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="setonkeydown"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>SetOnKeyDown</b></font>( <b>const</b> Value: <a href=kol_pas.htm#tonkey target="_top">TOnKey</a> );</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="setonkeyup"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>SetOnKeyUp</b></font>( <b>const</b> Value: <a href=kol_pas.htm#tonkey target="_top">TOnKey</a> );</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="setonmousedown"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>SetOnMouseDown</b></font>( <b>const</b> Value: <a href=kol_pas.htm#tonmouse target="_top">TOnMouse</a> );</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="setonmousemove"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>SetOnMouseMove</b></font>( <b>const</b> Value: <a href=kol_pas.htm#tonmouse target="_top">TOnMouse</a> );</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="setonmouseup"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>SetOnMouseUp</b></font>( <b>const</b> Value: <a href=kol_pas.htm#tonmouse target="_top">TOnMouse</a> );</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="setonmousewheel"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>SetOnMouseWheel</b></font>( <b>const</b> Value: <a href=kol_pas.htm#tonmouse target="_top">TOnMouse</a> );</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="setonmousedblclk"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>SetOnMouseDblClk</b></font>( <b>const</b> Value: <a href=kol_pas.htm#tonmouse target="_top">TOnMouse</a> );</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="sethelpcontext"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>SetHelpContext</b></font>( Value: <b>Integer</b> );</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="setontvdelete"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>SetOnTVDelete</b></font>( <b>const</b> Value: <a href=kol_pas.htm#tontvdelete target="_top">TOnTVDelete</a> );</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="defaultbtnproc"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>DefaultBtnProc</b></font>( <b>var</b> Msg: TMsg; <b>var</b> Rslt: <b>Integer</b> ): <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="createparented"></a>
<p>
<font face="Courier" color="#800080"><b>constructor</b> <font color="#808000"><b>CreateParented</b></font>( AParent: <a href=kol_pas.htm#pcontrol target="_top">PControl</a> );</font>
<br>
Creates new instance of TControl object, calling <a href=#initparented target="main">InitParented</a>
</p>
<a name="createorthaned"></a>
<p>
<font face="Courier" color="#800080"><b>constructor</b> <font color="#808000"><b>CreateOrthaned</b></font>( AParentWnd: HWnd );</font>
<br>
Creates new instance of TControl object, calling <a href=#initorthaned target="main">InitOrthaned</a>
</p>
<a name="createparented"></a>
<p>
<font face="Courier" color="#800080"><b>constructor</b> <font color="#808000"><b>CreateParented</b></font>( AParent: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>; widget: PGtkWidget; need_eventbox: <b>Boolean</b> );</font>
<br>
Creates new instance of TControl object, calling <a href=#initparented target="main">InitParented</a>
</p>
<a name="destroy"></a>
<p>
<font face="Courier" color="#800080"><b>destructor</b> <font color="#808000"><b>Destroy</b></font>; <b>virtual</b>;</font>
<br>
Destroyes object. First of all, destructors for all children
are called.
</p>
<a name="getwindowhandle"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>GetWindowHandle</b></font>: HWnd;</font>
<br>
Returns window handle. If window is not yet created,
method <a href=#createwindow target="main">CreateWindow</a> is called.
</p>
<a name="createchildwindows"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>CreateChildWindows</b></font>;</font>
<br>
Enumerates all children recursively and calls <a href=#createwindow target="main">CreateWindow</a> for all
of these.
</p>
<a name="childindex"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>ChildIndex</b></font>( Child: <a href=kol_pas.htm#pcontrol target="_top">PControl</a> ): <b>Integer</b>;</font>
<br>
Returns index of given child.
</p>
<a name="movechild"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>MoveChild</b></font>( Child: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>; NewIdx: <b>Integer</b> );</font>
<br>
Moves given Child into new position.
</p>
<a name="enablechildren"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>EnableChildren</b></font>( Enable, Recursive: <b>Boolean</b> );</font>
<br>
Enables (Enable = TRUE) or disables (Enable = FALSE) all the children
of the control. If Recursive = TRUE then all the children of all the
children are enabled or disabled recursively.
</p>
<a name="clientrect"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>ClientRect</b></font>: TRect;</font>
<br>
Client rectangle of TControl. Contrary to VCL, for some
classes (e.g. for graphic controls) can be relative
not to itself, but to top left corner of the parent's ClientRect
rectangle.
</p>
<a name="controlrect"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>ControlRect</b></font>: TRect;</font>
<br>
Absolute bounding rectangle relatively to nearest
<a href=#windowed target="main">Windowed</a> parent client rectangle (at least to a form, but usually to
a <a href=#parent target="main">Parent</a>).
Useful while drawing on device context, provided by such
<a href=#windowed target="main">Windowed</a> parent. For form itself is the same as <a href=#boundsrect target="main">BoundsRect</a>.
</p>
<a name="controlatpos"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>ControlAtPos</b></font>( X, Y: <b>Integer</b>; IgnoreDisabled: <b>Boolean</b> ): <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Searches control at the given position (relatively to top left
corner of the <a href=#clientrect target="main">ClientRect</a>).
</p>
<a name="invalidate"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>Invalidate</b></font>;</font>
<br>
Invalidates rectangle, occupied by the visual (but only if Showing =
True).
</p>
<a name="invalidateex"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>InvalidateEx</b></font>;</font>
<br>
Invalidates the window and all its children.
</p>
<a name="invalidatenc"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>InvalidateNC</b></font>( Recursive: <b>Boolean</b> );</font>
<br>
Invalidates the window and all its children including non-client area.
</p>
<a name="update"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>Update</b></font>;</font>
<br>
Updates control's window and calls Update for all child controls.
</p>
<a name="beginupdate"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>BeginUpdate</b></font>;</font>
<br>
 <a name="treeview">
 <a name="listview">
 <a name="richedit">
 <a name="memo">
 <a name="listbox">
Call this method to stop visual updates of the control until correspondent
<a href=#endupdate target="main">EndUpdate</a> called (pairs BeginUpdate - <a href=#endupdate target="main">EndUpdate</a> can be nested).
</p>
<a name="endupdate"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>EndUpdate</b></font>;</font>
<br>
See <a href=#beginupdate target="main">BeginUpdate</a>.
</p>
<a name="handleallocated"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>HandleAllocated</b></font>: <b>Boolean</b>;</font>
<br>
Returns True, if window handle is allocated. Has no sense for
non-<a href=#windowed target="main">Windowed</a> objects (but now, the KOL has no non-<a href=#windowed target="main">Windowed</a> controls).
</p>
<a name="paintbackground"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>PaintBackground</b></font>( DC: HDC; Rect: PRect );</font>
<br>
Is called to paint background in given rectangle. This
method is filling clipped area of the Rect rectangle with
<a href=#color target="main">Color</a>, but only if global event <a href=kol_pas.htm#global_onpaintbkgnd target="_top">Global_OnPaintBkgnd</a> is
not assigned. If assigned, this one is called instead here.
<br>&nbsp;&nbsp;&nbsp;
This method made public, so it can be called directly to
fill some device context's rectangle. But remember, that
independantly of Rect, top left corner of background piece
will be located so, if drawing is occure into <a href=#controlrect target="main">ControlRect</a>
rectangle.
</p>
<a name="parentform"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>ParentForm</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
 <a name="form">
Returns parent form for a control (of @Self for form itself.
</p>
<a name="client2screen"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>Client2Screen</b></font>( <b>const</b> P: TPoint ): TPoint;</font>
<br>
Converts the client coordinates of a specified point to screen coordinates.
</p>
<a name="screen2client"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>Screen2Client</b></font>( <b>const</b> P: TPoint ): TPoint;</font>
<br>
Converts screen coordinates of a specified point to client coordinates.
</p>
<a name="createwindow"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>CreateWindow</b></font>: <b>Boolean</b>; <b>virtual</b>;</font>
<br>
 <a name="form">
Creates correspondent window object. Returns True if success (if
window is already created, False is returned). If applied to a form,
all child controls also allocates handles that time.
<br>&nbsp;&nbsp;&nbsp;
Call this method to ensure, that a hanle is allocated for a form,
an application button or a control. (It is not necessary to do so in
the most cases, even if You plan to work with control's handle directly.
But immediately after creating the object, if You want to pass its
handle to API function, this can be helpful).
</p>
<a name="close"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>Close</b></font>;</font>
<br>
 <a name="appbutton">
 <a name="form">
Closes window. If a window is the main form, this closes application,
terminating it. Also it is possible to call Close method for <a href=kol_pas.htm#applet target="_top">Applet</a>
window to stop application.
</p>
<a name="cursorload"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>CursorLoad</b></font>( Inst: <b>Integer</b>; ResName: PKOLChar );</font>
<br>
Loads <a href=#cursor target="main">Cursor</a> from the resource. See also comments for <a href=#icon target="main">Icon</a> property.
</p>
<a name="iconload"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>IconLoad</b></font>( Inst: <b>Integer</b>; ResName: PKOLChar );</font>
<br>
 <a name="appbutton">
 <a name="form">
See <a href=#icon target="main">Icon</a> property.
</p>
<a name="iconloadcursor"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>IconLoadCursor</b></font>( Inst: <b>Integer</b>; ResName: PKOLChar );</font>
<br>
 <a name="appbutton">
 <a name="form">
Loads <a href=#icon target="main">Icon</a> from the cursor resource. See also <a href=#icon target="main">Icon</a> property.
</p>
<a name="assignhelpcontext"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>AssignHelpContext</b></font>( Context: <b>Integer</b> ): <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Assigns <a href=#helpcontext target="main">HelpContext</a> and returns @ Self (can be used in initialization
of a control in a chain of &quot;transparent&quot; calls).
</p>
<a name="callhelp"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>CallHelp</b></font>( Context: <b>Integer</b>; CtxCtl: <a href=kol_pas.htm#pcontrol target="_top">PControl</a> );</font>
<br>
Method of a form or <a href=kol_pas.htm#applet target="_top">Applet</a>. Call it to show help with the given context
ID. If the Context = 0, help contents is displayed. By default,
WinHelp is used. To allow using HtmlHelp, call AssignHtmlHelp global
function. When WinHelp used, <a href=#helppath target="main">HelpPath</a> variable can be assigned directly.
If <a href=#helppath target="main">HelpPath</a> variable is not assigned, application name
(and path) is used, with extension replaced to '.hlp'.
</p>
<a name="selectall"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>SelectAll</b></font>;</font>
<br>
 <a name="edit">
 <a name="memo">
 <a name="richedit">
Makes all the text in editbox or RichEdit, or all items in listbox
selected.
</p>
<a name="replaceselection"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>ReplaceSelection</b></font>( <b>const</b> Value: KOLString; aCanUndo: <b>Boolean</b> );</font>
<br>
 <a name="edit">
 <a name="memo">
 <a name="richedit">
Replaces selection (in edit, RichEdit). Unlike assigning new value
to <a href=#selection target="main">Selection</a> property, it is possible to specify, if operation can
be undone.
</p>
<a name="deletelines"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>DeleteLines</b></font>( FromLine, ToLine: <b>Integer</b> );</font>
<br>
 <a name="edit">
 <a name="memo">
 <a name="richedit">
Deletes lines from FromLine to ToLine (inclusively, i.e. 0 to 0 deletes
one line with index 0). Current selection is restored as possible.
</p>
<a name="item2pos"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>Item2Pos</b></font>( ItemIdx: <b>Integer</b> ): <b>DWORD</b>;</font>
<br>
 <a name="edit">
 <a name="memo">
Only for edit controls: converts line index to character position.
</p>
<a name="pos2item"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>Pos2Item</b></font>( Pos: <b>Integer</b> ): <b>DWORD</b>;</font>
<br>
 <a name="edit">
 <a name="memo">
Only for edit controls: converts character position to line index.
</p>
<a name="saveposition"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>SavePosition</b></font>: TEditPositions;</font>
<br>
 <a name="edit">
 <a name="memo">
Only for edit controls: saves current editor selection and scroll
positions. To restore position, use <a href=#restoreposition target="main">RestorePosition</a> with a structure,
containing saved position as a parameter.
</p>
<a name="restoreposition"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>RestorePosition</b></font>( <b>const</b> p: TEditPositions );</font>
<br>
 <a name="edit">
 <a name="memo">
Call RestorePosition with a structure, containing saved position
as a parameter (this structure filled in in <a href=#saveposition target="main">SavePosition</a> method).
If you set RestoreScroll to FALSE, only selection is restored,
without scroll position.
</p>
<a name="updateposition"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>UpdatePosition</b></font>( <b>var</b> p: TEditPositions; FromPos, CountInsertDelChars, CountInsertDelLines: <b>Integer</b> );</font>
<br>
 <a name="edit">
 <a name="memo">
If you called <a href=#saveposition target="main">SavePosition</a> and then make some changes in the edit control,
calling <a href=#restoreposition target="main">RestorePosition</a> will fail if chages are affecting selection size.
The problem can be solved updating saved position info using this method.
Pass a count of inserted characters and lines as a positive number and a
count of deleted characters as a negative number here. CountInsertDelLines
is optional paramters: if you do not specify it, only selection is fixed.
</p>
<a name="edittabchar"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>EditTabChar</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
 <a name="edit">
 <a name="memo">
Call this method (once) to provide insertion of tab character (code #9)
when tab key is pressed on keyboard.
</p>
<a name="indexof"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>IndexOf</b></font>( <b>const</b> S: KOLString ): <b>Integer</b>;</font>
<br>
 <a name="listbox">
 <a name="combobox">
 <a name="tabcontrol">
Works for the most of control types, though some of those
have its own methods to search given item. If a control is not
list box or combobox, item is finding by enumerating all
the <a href=#items target="main">Items</a> one by one. See also <a href=#searchfor target="main">SearchFor</a> method.
</p>
<a name="searchfor"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>SearchFor</b></font>( <b>const</b> S: KOLString; StartAfter: <b>Integer</b>; Partial: <b>Boolean</b> ): <b>Integer</b>;</font>
<br>
 <a name="listbox">
 <a name="combobox">
 <a name="tabcontrol">
Works for the most of control types, though some of those
have its own methods to search given item. If a control is not
list box or combobox, item is finding by enumerating all
the <a href=#items target="main">Items</a> one by one. See also <a href=#indexof target="main">IndexOf</a> method.
</p>
<a name="adddirlist"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>AddDirList</b></font>( <b>const</b> Filemask: KOLString; Attrs: <b>DWORD</b> );</font>
<br>
 <a name="listbox">
 <a name="combo">
Can be used only with listbox and combobox - to add directory list items,
filtered by given Filemask (can contain wildcards) and Attrs. Following
flags can be combined in Attrs:
<table border=0>
<tr><td>DDL_ARCHIVE</td><td>
Include archived files.
</td></tr>

<tr><td>DDL_DIRECTORY</td><td>
Includes subdirectories. Subdirectory names are
enclosed in square brackets ([ ]).
</td></tr>

<tr><td>DDL_DRIVES</td><td>
Includes drives. Drives are listed in the form [-x-],
where x is the drive letter.
</td></tr>

<tr><td>DDL_EXCLUSIVE</td><td>
Includes only files with the specified attributes.
By default, read-write files are listed even if DDL_READWRITE is
not specified. Also, this flag needed to list directories only,
etc.
</td></tr>

<tr><td>DDL_HIDDEN</td><td>
Includes hidden files.
</td></tr>

<tr><td>DDL_READONLY</td><td>
Includes read-only files.
</td></tr>

<tr><td>DDL_READWRITE</td><td>
Includes read-write files with no additional
attributes.
</td></tr>

<tr><td>DDL_SYSTEM</td><td>
Includes system files.
</td></tr>

&lt;/table&gt;
If the listbox is sorted, directory items will be sorted (alpabetically).
</p>
<a name="setbuttonicon"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>SetButtonIcon</b></font>( aIcon: HIcon ): <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
 <a name="button">
Sets up button icon image and changes its styles. Returns button itself.
</p>
<a name="setbuttonbitmap"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>SetButtonBitmap</b></font>( aBmp: HBitmap ): <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
 <a name="button">
Sets up button icon image and changes its styles. Returns button itself.
</p>
<a name="allbtnreturnclick"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>AllBtnReturnClick</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Call this method for a form or any its control to provide clicking
a focused button when ENTER pressed. By default, a button can be clicked
only by SPACE key from the keyboard, or by mouse.
</p>
<a name="show"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>Show</b></font>;</font>
<br>
 <a name="appbutton">
 <a name="form">
Makes control visible and activates it.
</p>
<a name="showmodal"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>ShowModal</b></font>: <b>Integer</b>;</font>
<br>
 <a name="form">
Can be used only with a forms to show it modal. See also global function
ShowMsgModal.
<br>
To use a form as a modal, it is possible to make it either auto-created
or dynamically created. For a first case, You (may be prefer to hide a
form after showing it as a modal:
<p align=left><font face="Courier" color="008080"><b><pre>

  <font color="800000"><b>procedure</b></font> TForm1.Button1Click( Sender: <a href="kol_pas.htm#pobj target="_top""><font color="008080">PObj</font></a> );
  <font color="800000"><b>begin</b></font>
    Form2.Form.ShowModal;
    Form2.Form.<a href="tcontrol.htm#hide"><font color="008080">Hide</font></a>;
  <font color="800000"><b>end</b></font>;

</pre></b></font></p>
Another way is to create modal form just before showing it (this economies
system resources):
<p align=left><font face="Courier" color="008080"><b><pre>

  <font color="800000"><b>procedure</b></font> TForm1.Button1Click( Sender: <a href="kol_pas.htm#pobj target="_top""><font color="008080">PObj</font></a> );
  <font color="800000"><b>begin</b></font>
    NewForm2( Form2, <a href="kol_pas.htm#applet target="_top""><font color="008080">Applet</font></a> );
    Form2.Form.ShowModal;
    Form2.Form.<a href="tobj.htm#free"><font color="008080">Free</font></a>; </b><font color="40A040"><em>// Never call Form2.Free or Form2.Form.Close</em></font><b>
  <font color="800000"><b>end</b></font>;               </b><font color="40A040"><em>// but always Form2.Form.Free; (!)</em></font><b>

</pre></b></font></p>
In samples above, You certainly can place any wished code before and after
calling ShowModal method.
<br>
Do not forget that if You have more than a single form in your project,
separate <a href=kol_pas.htm#applet target="_top">Applet</a> object should be used.
<br>
See also <a href=#showmodalex target="main">ShowModalEx</a>.
</p>
<a name="showmodalparented"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>ShowModalParented</b></font>( <b>const</b> AParent: <a href=kol_pas.htm#pcontrol target="_top">PControl</a> ): <b>Integer</b>;</font>
<br>
by Alexander Pravdin. The same as <a href=#showmodal target="main">ShowModal</a>, but with a certain
form as a parent.
</p>
<a name="showmodalex"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>ShowModalEx</b></font>: <b>Integer</b>;</font>
<br>
The same as <a href=#showmodal target="main">ShowModal</a>, but all the windows of current thread are
disabled while showing form modal. This is useful if KOL form from
a DLL is used modally in non-KOL application.
</p>
<a name="hide"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>Hide</b></font>;</font>
<br>
 <a name="appbutton">
 <a name="form">
Makes control hidden.
</p>
<a name="calldefwndproc"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>CallDefWndProc</b></font>( <b>var</b> Msg: TMsg ): <b>Integer</b>;</font>
<br>
Function to be called in <a href=#wndproc target="main">WndProc</a> method to redirect message handling
to default window procedure.
</p>
<a name="dosetfocus"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>DoSetFocus</b></font>: <b>Boolean</b>;</font>
<br>
Sets focus for <a href=#enabled target="main">Enabled</a> window. Returns True, if success.
</p>
<a name="minimizenormalanimated"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>MinimizeNormalAnimated</b></font>;</font>
<br>
 <a name="form">
Apply this method to a main form (not to another form or <a href=kol_pas.htm#applet target="_top">Applet</a>,
even when separate <a href=kol_pas.htm#applet target="_top">Applet</a> control is not used and main form matches it!).
This provides normal animated visual minimization for the application.
It therefore has no effect, if animation during minimize/resore is
turned off by user.
<br>
Applying this method also provides for the main form (only for it)
correct restoring the form maximized if it was maximized while
minimizing the application. See also <a href=#restorenormalmaximized target="main">RestoreNormalMaximized</a> method.
</p>
<a name="restorenormalmaximized"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>RestoreNormalMaximized</b></font>;</font>
<br>
 <a name="form">
Apply to any form for which it is important to restore it maximized
when the application was minimizing while such form was maximized.
If the method <a href=#minimizenormalanimated target="main">MinimizeNormalAnimated</a> was called for the main form,
then the correct behaviour is already provided for the main form, so
in such case it is no more necessary to call also this method, but
calling it therefore is not an error.
</p>
<a name="ismainwindow"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>IsMainWindow</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="appbutton">
 <a name="form">
Returns True, if a window is the main in application (created first
after the <a href=kol_pas.htm#applet target="_top">Applet</a>, or matches the <a href=kol_pas.htm#applet target="_top">Applet</a>).
</p>
<a name="processmessage"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>ProcessMessage</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="appbutton">
Processes one message. See also <a href=#processmessages target="main">ProcessMessages</a>.
</p>
<a name="processmessages"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>ProcessMessages</b></font>;</font>
<br>
 <a name="appbutton">
Processes pending messages during long cycle of calculation,
allowing to window to be repainted if needed and to respond to other
messages. But if there are no such messages, your application can be
stopped until such one appear in messages queue. To prevent such
situation, use method <a href=#processpendingmessages target="main">ProcessPendingMessages</a> instead.
</p>
<a name="processmessagesex"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>ProcessMessagesEx</b></font>;</font>
<br>
Version of <a href=#processmessages target="main">ProcessMessages</a>, which works always correctly, even if
the application is minimized or background.
</p>
<a name="processpendingmessages"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>ProcessPendingMessages</b></font>;</font>
<br>
 <a name="appbutton">
Similar to <a href=#processmessages target="main">ProcessMessages</a>, but without waiting of
message in messages queue. I.e., if there are no pending
messages, this method immediately returns control to your
code. This method is better to call during long cycle of
calculation (then <a href=#processmessages target="main">ProcessMessages</a>).
</p>
<a name="processpaintmessages"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>ProcessPaintMessages</b></font>;</font>
<br>
</p>
<a name="wndproc"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>WndProc</b></font>( <b>var</b> Msg: TMsg ): <b>Integer</b>; <b>virtual</b>;</font>
<br>
Responds to all Windows messages, posted (sended) to the
window, before all other proceeding. You can override it in
derived controls, but in KOL there are several other ways
to control message flow of existing controls without deriving
another costom controls for only such purposes. See <a href=#onmessage target="main">OnMessage</a>,
<a href=#attachproc target="main">AttachProc</a>.
</p>
<a name="setborder"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>SetBorder</b></font>( Value: <b>Integer</b> ): <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Assigns new <a href=#border target="main">Border</a> value, and returns @ Self.
</p>
<a name="bringtofront"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>BringToFront</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Changes z-order of the control, bringing it to the topmost level.
</p>
<a name="sendtoback"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>SendToBack</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Changes z-order of the control, sending it to the back of siblings.
</p>
<a name="dblbuftopparent"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>DblBufTopParent</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Returns the topmost <a href=#doublebuffered target="main">DoubleBuffered</a> <a href=#parent target="main">Parent</a> control.
</p>
<a name="mousetransparent"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>MouseTransparent</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Call this method to set up mouse transparent control (which always
returns HTTRANSPARENT in responce to WM_NCHITTEST). This function
returns a pointer to a control itself.
</p>
<a name="gotocontrol"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>GotoControl</b></font>( Key: <b>DWORD</b> );</font>
<br>
 <a name="form">
Emulates tabulation key press w/o sending message to current control.
Can be applied to a form or to any its control. If VK_TAB is used,
state of shift kay is checked in: if it is pressed, tabulate is in
backward direction.
</p>
<a name="dragstart"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>DragStart</b></font>;</font>
<br>
Call this method for a form or control to drag it with left mouse button,
when mouse left button is already down. <a href=#dragging target="main">Dragging</a> is stopped when left mouse
button is released. See also <a href=#dragstartex target="main">DragStartEx</a>, <a href=#dragstopex target="main">DragStopEx</a>.
</p>
<a name="dragstartex"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>DragStartEx</b></font>;</font>
<br>
Call this method to start dragging the form by mouse. To stop
dragging, call <a href=#dragstopex target="main">DragStopEx</a> method. (Tip: to detect mouse up event,
use <a href=#onmouseup target="main">OnMouseUp</a> event of the dragging control). This method can be used
to move any control with the mouse, not only entire form. State of
mouse button is not significant. Determine dragging state of the control
checking its <a href=#dragging target="main">Dragging</a> property.
</p>
<a name="dragstopex"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>DragStopEx</b></font>;</font>
<br>
Call this method to stop dragging the form (started by DragStopEx).
</p>
<a name="dragitem"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>DragItem</b></font>( OnDrag: <a href=kol_pas.htm#tondrag target="_top">TOnDrag</a> );</font>
<br>
Starts dragging something with mouse. During the process,
callback function OnDrag is called, which allows to control
drop target, change cursor shape, etc.
</p>
<a name="likespeedbutton"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>LikeSpeedButton</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
 <a name="button">
 <a name="bitbtn">
<a href=#transparent target="main">Transparent</a> method (returns control itself). Makes button not focusable.
</p>
<a name="add"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>Add</b></font>( <b>const</b> S: KOLString ): <b>Integer</b>;</font>
<br>
 <a name="listbox">
 <a name="combo">
Only for listbox and combobox.
</p>
<a name="insert"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>Insert</b></font>( Idx: <b>Integer</b>; <b>const</b> S: KOLString ): <b>Integer</b>;</font>
<br>
 <a name="listbox">
 <a name="combo">
Only for listbox and combobox.
</p>
<a name="delete"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>Delete</b></font>( Idx: <b>Integer</b> );</font>
<br>
 <a name="listbox">
 <a name="combo">
Only for listbox and combobox.
</p>
<a name="clear"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>Clear</b></font>;</font>
<br>
Clears object content. Has different sense for different controls.
E.g., for label, editbox, button and other simple controls it
assigns empty string to <a href=#caption target="main">Caption</a> property. For listbox, combobox,
listview it deletes all items. For toolbar, it deletes all buttons.
Et so on.
</p>
<a name="removestatus"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>RemoveStatus</b></font>;</font>
<br>
 <a name="form">
Call it to remove status bar from a form (created in result of assigning
value(s) to <a href=#statustext target="main">StatusText</a>[], <a href=#simplestatustext target="main">SimpleStatusText</a> properties). When status bar is
removed, form is resized to preset client height.
</p>
<a name="statuspanelcount"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>StatusPanelCount</b></font>: <b>Integer</b>;</font>
<br>
 <a name="form">
Returns number of status panels defined in status bar.
</p>
<a name="setunicode"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>SetUnicode</b></font>( Unicode: <b>Boolean</b> ): <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
 <a name="listview">
 <a name="treeview">
 <a name="tabcontrol">
Sets control as Unicode or not. The control itself is returned as for
other &quot;transparent&quot; functions. A conditional define UNICODE_CTRLS must
be added to a project to provide handling unicode messages.
</p>
<a name="tc_insert"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>TC_Insert</b></font>( Idx: <b>Integer</b>; <b>const</b> TabText: KOLString; TabImgIdx: <b>Integer</b> ): <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
 <a name="tabcontrol">
Inserts new tab before given, returns correspondent page control
(which can be used as a parent for controls to place on the page).
</p>
<a name="tc_delete"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>TC_Delete</b></font>( Idx: <b>Integer</b> );</font>
<br>
 <a name="tabcontrol">
Removes tab from tab control, destroying all its child controls.
</p>
<a name="tc_insertcontrol"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>TC_InsertControl</b></font>( Idx: <b>Integer</b>; <b>const</b> TabText: KOLString; TabImgIdx: <b>Integer</b>; Page: <a href=kol_pas.htm#pcontrol target="_top">PControl</a> );</font>
<br>
 <a name="tabcontrol">
Inserts new tab before given, but not construt this Page
(this control must be created before inserting, and may be not a Panel).
</p>
<a name="tc_remove"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>TC_Remove</b></font>( Idx: <b>Integer</b> ): <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
 <a name="tabcontrol">
Only removes tab from tab control, and return this Page as Result.
</p>
<a name="tc_setpadding"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>TC_SetPadding</b></font>( cx, cy: <b>Integer</b> );</font>
<br>
 <a name="tabcontrol">
Sets space padding around tab text in a tab of tab control.
</p>
<a name="tc_tabatpos"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>TC_TabAtPos</b></font>( x, y: <b>Integer</b> ): <b>Integer</b>;</font>
<br>
 <a name="tabcontrol">
Returns index of tab, found at the given position (relative to
a client rectangle of tab control). If no tabs found at the
position, -1 is returned.
</p>
<a name="tc_displayrect"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>TC_DisplayRect</b></font>: TRect;</font>
<br>
 <a name="tabcontrol">
Returns rectangle, occupied by a page rather then tab.
</p>
<a name="tc_indexof"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>TC_IndexOf</b></font>( <b>const</b> S: KOLString ): <b>Integer</b>;</font>
<br>
 <a name="tabcontrol">
By Mr Brdo. Index of page by its <a href=#caption target="main">Caption</a>.
</p>
<a name="tc_searchfor"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>TC_SearchFor</b></font>( <b>const</b> S: KOLString; StartAfter: <b>Integer</b>; Partial: <b>Boolean</b> ): <b>Integer</b>;</font>
<br>
 <a name="tabcontrol">
By Mr Brdo. Index of page by its <a href=#caption target="main">Caption</a>.
</p>
<a name="lvcoladd"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>LVColAdd</b></font>( <b>const</b> aText: KOLString; aalign: <a href=kol_pas.htm#ttextalign target="_top">TTextAlign</a>; aWidth: <b>Integer</b> );</font>
<br>
 <a name="listview">
Adds new column. Pass 'width' &lt;= 0 to provide default column width.
'text' is a column header text.
</p>
<a name="lvcolinsert"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>LVColInsert</b></font>( ColIdx: <b>Integer</b>; <b>const</b> aText: KOLString; aAlign: <a href=kol_pas.htm#ttextalign target="_top">TTextAlign</a>; aWidth: <b>Integer</b> );</font>
<br>
 <a name="listview">
Inserts new column at the Idx position (1-based column index).
</p>
<a name="lvcoldelete"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>LVColDelete</b></font>( ColIdx: <b>Integer</b> );</font>
<br>
 <a name="listview">
Deletes column from List View
</p>
<a name="lvnextitem"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>LVNextItem</b></font>( IdxPrev: <b>Integer</b>; Attrs: <b>DWORD</b> ): <b>Integer</b>;</font>
<br>
 <a name="listview">
Returns an index of the next after IdxPrev item with given attributes in
the list view. Attributes can be:
LVNI_ALL - Searches for a subsequent item by index, the default value.
<br><br>
Searchs by physical relationship to the index of the item where the
search is to begin.
LVNI_ABOVE - Searches for an item that is above the specified item.
LVNI_BELOW - Searches for an item that is below the specified item.
LVNI_TOLEFT - Searches for an item to the left of the specified item.
LVNI_TORIGHT - Searches for an item to the right of the specified item.
<br><br>
The state of the item to find can be specified with one or a combination
of the following values:
LVNI_CUT - The item has the LVIS_CUT state flag set.
LVNI_DROPHILITED - The item has the LVIS_DROPHILITED state flag set
LVNI_FOCUSED - The item has the LVIS_FOCUSED state flag set.
LVNI_SELECTED - The item has the LVIS_SELECTED state flag set.
</p>
<a name="lvnextselected"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>LVNextSelected</b></font>( IdxPrev: <b>Integer</b> ): <b>Integer</b>;</font>
<br>
 <a name="listview">
Returns an index of next (after IdxPrev) selected item in a list view.
</p>
<a name="lvadd"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>LVAdd</b></font>( <b>const</b> aText: KOLString; ImgIdx: <b>Integer</b>; State: TListViewItemState; StateImgIdx, OverlayImgIdx: <b>Integer</b>; Data: <b>DWORD</b> ): <b>Integer</b>;</font>
<br>
 <a name="listview">
Adds new line to the end of ListView control. Only content of item itself
is set (aText, ImgIdx). To change other column text and attributes of
item added, use appropriate properties / methods ().
<br>
Returns an index of added item.
<br>
There is no Unicode version defined, use LVItemAddW instead.
</p>
<a name="lvitemadd"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>LVItemAdd</b></font>( <b>const</b> aText: KOLString ): <b>Integer</b>;</font>
<br>
 <a name="listview">
Adds an item to the end of list view. Returns an index of the item added.
</p>
<a name="lvinsert"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>LVInsert</b></font>( Idx: <b>Integer</b>; <b>const</b> aText: KOLString; ImgIdx: <b>Integer</b>; State: TListViewItemState; StateImgIdx, OverlayImgIdx: <b>Integer</b>; Data: <b>DWORD</b> ): <b>Integer</b>;</font>
<br>
 <a name="listview">
Inserts new line before line with index Idx in ListView control. Only
content of item itself is set (aText, ImgIdx). To change other column
text and attributes of item added, use appropriate properties / methods ().
if ImgIdx = I_IMAGECALLBACK, event handler OnGetLVItemImgIdx is responsible
for returning image index for an item ( /// not implemented yet /// )
Pass StateImgIdx and OverlayImgIdx = 0 (ignored in that case) or 1..15 to
use correspondent icon from <a href=#imageliststate target="main">ImageListState</a> image list.
<br> Returns an index of item inserted.
<br> There is no unicode version of this method, use LVItemInsertW.
</p>
<a name="lviteminsert"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>LVItemInsert</b></font>( Idx: <b>Integer</b>; <b>const</b> aText: KOLString ): <b>Integer</b>;</font>
<br>
 <a name="listview">
Inserts an item to Idx position.
</p>
<a name="lvdelete"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>LVDelete</b></font>( Idx: <b>Integer</b> );</font>
<br>
 <a name="listview">
Deletes item of ListView with subitems (full row - in lvsDetail view style.
</p>
<a name="lvsetitem"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>LVSetItem</b></font>( Idx, Col: <b>Integer</b>; <b>const</b> aText: KOLString; ImgIdx: <b>Integer</b>; State: TListViewItemState; StateImgIdx, OverlayImgIdx: <b>Integer</b>; Data: <b>DWORD</b> );</font>
<br>
 <a name="listview">
Use this method to set item data and item columns data for ListView control.
It is possible to pass I_SKIP as ImgIdx, StateImgIdx, OverlayImgIdx values to
skip setting this fields. But all other are set always. Like in <a href=#lvinsert target="main">LVInsert</a> /
<a href=#lvadd target="main">LVAdd</a>, ImgIdx can be I_IMAGECALLBACK to determine that image will be
retrieved in OnGetItemImgIdx event handler when needed.
<br>
If this method is called to set data for column &gt; 0, parameters ImgIdx and
Data are ignored anyway.
<br> There is no unicode version of this method, use other methods
to set up listed properties separately using correspondent W-functions.
</p>
<a name="lvselectall"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>LVSelectAll</b></font>;</font>
<br>
 <a name="listview">
Call this method to select all the items of the list view control.
</p>
<a name="lvitemrect"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>LVItemRect</b></font>( Idx: <b>Integer</b>; Part: <a href=kol_pas.htm#tgetlvitempart target="_top">TGetLVItemPart</a> ): TRect;</font>
<br>
 <a name="listview">
Returns rectangle occupied by given item part(s) in ListView window.
Empty rectangle is returned, if the item is not viewing currently.
</p>
<a name="lvsubitemrect"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>LVSubItemRect</b></font>( Idx, ColIdx: <b>Integer</b> ): TRect;</font>
<br>
 <a name="listview">
Returns rectangle occupied by given item's subitem in ListView window,
in lvsDetail or lvsDetailNoHeader style. Empty rectangle (0,0,0,0) is
returned if the item is not viewing currently. <a href=#left target="main">Left</a> or/and right bounds
of the rectangle returned can be outbound item rectangle if only a part
of the subitem is visible or the subitem is not visible in the item,
which is visible itself.
</p>
<a name="lvitematpos"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>LVItemAtPos</b></font>( X, Y: <b>Integer</b> ): <b>Integer</b>;</font>
<br>
 <a name="listview">
Return index of item at the given position.
</p>
<a name="lvitematposex"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>LVItemAtPosEx</b></font>( X, Y: <b>Integer</b>; <b>var</b> Where: <a href=kol_pas.htm#twhereposlvitem target="_top">TWherePosLVItem</a> ): <b>Integer</b>;</font>
<br>
 <a name="listview">
Retrieves index of item and sets in Where, what part of item is under
given coordinates. If there are no items at the specified position,
-1 is returned.
</p>
<a name="lvmakevisible"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>LVMakeVisible</b></font>( Item: <b>Integer</b>; PartiallyOK: <b>Boolean</b> );</font>
<br>
 <a name="listview">
Makes listview item visible. Ignred when Item passed &lt; 0.
</p>
<a name="lvedititemlabel"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>LVEditItemLabel</b></font>( Idx: <b>Integer</b> );</font>
<br>
 <a name="listview">
Begins in-place editing of item label (first column text).
</p>
<a name="lvsort"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>LVSort</b></font>;</font>
<br>
 <a name="listview">
Initiates sorting of list view items. This sorting procedure is available only
for Win2K, WinNT4 with IE5, Win98 or Win95 with IE5. See also <a href=#lvsortdata target="main">LVSortData</a>.
</p>
<a name="lvsortdata"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>LVSortData</b></font>;</font>
<br>
 <a name="listview">
Initiates sorting of list view items. This sorting procedure is always available
in Windows95/98, NT/2000. But <a href=#oncomparelvitems target="main">OnCompareLVItems</a> procedure receives not indexes of
items compared but its Data field associated instead.
</p>
<a name="lvsortcolumn"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>LVSortColumn</b></font>( Idx: <b>Integer</b> );</font>
<br>
 <a name="listview">
This is a method to simplify sort by column. Just call it in your <a href=#oncolumnclick target="main">OnColumnClick</a>
event passing column index and enjoy with your list view sorted automatically
when column header is clicked. Requieres Windows2000 or Winows98, not supported
under WinNT 4.0 and below and under Windows95.
<br>
Either lvoSortAscending or lvoSortDescending option must be set in
<a href=#lvoptions target="main">LVOptions</a>, otherwise no sorting is performed.
</p>
<a name="lvindexof"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>LVIndexOf</b></font>( <b>const</b> S: KOLString ): <b>Integer</b>;</font>
<br>
Returns first list view item index with caption matching S.
The same as <a href=#lvsearchfor target="main">LVSearchFor</a>( S, -1, FALSE ).
</p>
<a name="lvsearchfor"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>LVSearchFor</b></font>( <b>const</b> S: KOLString; StartAfter: <b>Integer</b>; Partial: <b>Boolean</b> ): <b>Integer</b>;</font>
<br>
Searches an item with <a href=#caption target="main">Caption</a> equal to S (or starting from S, if Partial = TRUE).
Searching is started after an item specified by StartAfter parameter.
</p>
<a name="tvinsert"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>TVInsert</b></font>( nParent, nAfter: THandle; <b>const</b> Txt: KOLString ): THandle;</font>
<br>
 <a name="treeview">
Inserts item to a tree view. If nParent is 0 or TVI_ROOT, the item is
inserted at the root of tree view. It is possible to pass following special
values as nAfter parameter:
<pre>
TVI_FIRST        Inserts the item at the beginning of the list.
TVI_LAST         Inserts the item at the end of the list.
TVI_SORT         Inserts the item into the list in alphabetical order.
</pre>
</p>
<a name="tvdelete"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>TVDelete</b></font>( Item: THandle );</font>
<br>
 <a name="treeview">
Removes an item from the tree view. If value TVI_ROOT is passed, all items
are removed.
</p>
<a name="tvitempath"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>TVItemPath</b></font>( Item: THandle; Delimiter: KOLChar ): KOLString;</font>
<br>
 <a name="treeview">
Returns full path from the root item to given item. Path is calculated
as a concatenation of all parent nodes text strings, separated by
given delimiter character.
<br>Please note, that returned path has no trailing delimiter, this
character is only separating different parts of the path.
<br>If Item is not specified ( =0 ), path is returned
for Selected item.
</p>
<a name="tvitematpos"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>TVItemAtPos</b></font>( x, y: <b>Integer</b>; <b>var</b> Where: <b>DWORD</b> ): THandle;</font>
<br>
 <a name="treeview">
Returns handle of item found at specified position (relative to upper left
corener of client area of the tree view). If no item found, 0 is returned.
Variable Where receives additional flags combination, describing more
detailed, on which part of item or tree view given point is located,
such as:
<pre>
TVHT_ABOVE              Above the client area
TVHT_BELOW              Below the client area
TVHT_NOWHERE            In the client area, but below the last item
TVHT_ONITEM        On the bitmap or label associated with an item
TVHT_ONITEMBUTTON       On the button associated with an item
TVHT_ONITEMICON        On the bitmap associated with an item
TVHT_ONITEMINDENT       In the indentation associated with an item
TVHT_ONITEMLABEL        On the label (string) associated with an item
TVHT_ONITEMRIGHT        In the area to the right of an item
TVHT_ONITEMSTATEICON    On the state icon for a tree-view item that is in a user-defined state
TVHT_TOLEFT        To the right of the client area
TVHT_TORIGHT        To the left of the client area
</pre>
</p>
<a name="tvexpand"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>TVExpand</b></font>( Item: THandle; Flags: <b>DWORD</b> );</font>
<br>
 <a name="treeview">
Call it to expand/collapse item's child nodes. Possible values for Flags
parameter are:
&lt;pre&gt;
TVE_COLLAPSE         Collapses the list.
TVE_COLLAPSERESET    Collapses the list and removes the child items. Note
that TVE_COLLAPSE must also be specified.
TVE_EXPAND     Expands the list.
TVE_TOGGLE     Collapses the list if it is currently expanded or
expands it if it is currently collapsed.
&lt;/pre&gt;
</p>
<a name="tvsort"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>TVSort</b></font>( N: THandle );</font>
<br>
 <a name="treeview">
By Alex Mokrov. Sorts treeview. If N = 0, entire treeview is sorted.
Otherwise, children of the given node only.
</p>
<a name="tvedititem"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>TVEditItem</b></font>( Item: THandle );</font>
<br>
 <a name="treeview">
Begins editing given item label in tree view.
</p>
<a name="tvstopedit"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>TVStopEdit</b></font>( Cancel: <b>Boolean</b> );</font>
<br>
 <a name="treeview">
Ends editing item label, started by user or explicitly by <a href=#tvedititem target="main">TVEditItem</a> method.
</p>
<a name="tbaddbitmap"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>TBAddBitmap</b></font>( Bitmap: HBitmap );</font>
<br>
 <a name="toolbar">
Adds bitmaps to a toolbar. You can pass special values as Bitmap to
add one of predefined system button images bitmaps:
<br> THandle(-1) to add standard small icons,
<br> THandle(-2) to add standard large icons,
<br> THandle(-5) to add standard small view icons,
<br> THandle(-6) to add standard large view icons,
<br> THandle(-9) to add standard small history icons,
<br> THandle(-10) to add standard large history icons,
(in that case use following values as indexes to the standard and view
bitmaps:
<br>
STD_COPY, STD_CUT, STD_DELETE, STD_FILENEW, STD_FILEOPEN, STD_FILESAVE,
STD_FIND, STD_HELP, STD_PASTE, STD_PRINT, STD_PRINTPRE, STD_PROPERTIES,
STD_REDO, STD_REPLACE, STD_UNDO,
<br>
VIEW_LARGEICONS, VIEW_SMALLICONS,
VIEW_LIST, VIEW_DETAILS, VIEW_SORTNAME, VIEW_SORTSIZE, VIEW_SORTDATE,
VIEW_SORTTYPE (use it as parameters BtnImgIdxArray in <a href=#tbaddbuttons target="main">TBAddButtons</a> or
<a href=#tbinsertbuttons target="main">TBInsertButtons</a> methods, and in assigning value to <a href=#tbbuttonimage target="main">TBButtonImage</a>[ ]
property).
Added bitmaps have indeces starting from previous count of images
(as these are appended to existing - if any).
<br>
Note, that if You add your own (custom) bitmap, it is not transparent.
Do not assume that clSilver is always equal to clBtnFace. Use API
function <a href=kol_pas.htm#createmappedbitmap target="_top">CreateMappedBitmap</a> to load bitmap from resource and map
desired colors as you wish (e.g., convert clTeal to clBtnFace). Or,
call defined in KOL function <a href=kol_pas.htm#loadmappedbitmap target="_top">LoadMappedBitmap</a> to do the same more easy.
Unfortunately, resource identifier for bitmap to pass it to <a href=kol_pas.htm#loadmappedbitmap target="_top">LoadMappedBitmap</a>
or to <a href=kol_pas.htm#createmappedbitmap target="_top">CreateMappedBitmap</a> seems must be integer, so it is necessary to
create rc-file manually and compile using Borland Resource Compiler to
figure it out.
</p>
<a name="tbaddbuttons"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>TBAddButtons</b></font>( <b>const</b> Buttons: <b>array</b> <b>of</b> PKOLChar; <b>const</b> BtnImgIdxArray: <b>array</b> <b>of</b> <b>Integer</b> ): <b>Integer</b>;</font>
<br>
 <a name="toolbar">
Adds buttons to toolbar. Last string in Buttons array *must* be empty
('' or nil), so to add buttons without text, pass ' ' string (one space
char). It is not necessary to provide image indexes for all
buttons (it is sufficient to assign index for first button only).
But in place, correspondent to separator button (defined by string '-'),
any integer must be passed to assign follow image indexes correctly.
See example.
&nbsp;&nbsp;&nbsp;<a href="Toolbaraddingbuttonssample.htm"><font face="Webdings" size=7>&#181;</font></a>&nbsp;&nbsp;&nbsp;
To add check buttons, use prefix '+' or '-' in button definition
string. If next character is '!', such buttons are grouped to a
radio-group. Also, it is possible to use '^' prefix (must be first) to
define button with small drop-down section (use also <a href=#ontbdropdown target="main">OnTBDropDown</a> event
to respond to clicking drop down section of such buttons).
<br>
This function returns command id for first added button (other
id's can be calculated incrementing the result by one for each
button, except separators, which have no command id).
<br>
Note: for static toolbar (single in application and created
once) ids are started from value 100.
</p>
<a name="tbinsertbuttons"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>TBInsertButtons</b></font>( BeforeIdx: <b>Integer</b>; Buttons: <b>array</b> <b>of</b> PKOLChar; BtnImgIdxArray: <b>array</b> <b>of</b> <b>Integer</b> ): <b>Integer</b>;</font>
<br>
 <a name="toolbar">
Inserts buttons before button with given index on toolbar. Returns
command identifier for first button inserted (other can be calculated
incrementing returned value needed times. See also <a href=#tbaddbuttons target="main">TBAddButtons</a>.
</p>
<a name="tbdeletebutton"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>TBDeleteButton</b></font>( BtnID: <b>Integer</b> );</font>
<br>
 <a name="toolbar">
Deletes single button given by its command id. To delete separator,
use <a href=#tbdeletebtnbyidx target="main">TBDeleteBtnByIdx</a> instead.
</p>
<a name="tbdeletebtnbyidx"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>TBDeleteBtnByIdx</b></font>( Idx: <b>Integer</b> );</font>
<br>
 <a name="toolbar">
Deletes single button given by its index in toolbar (not by command ID).
</p>
<a name="tbclear"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>TBClear</b></font>;</font>
<br>
 <a name="toolbar">
Deletes all buttons. Dufa
</p>
<a name="tbassignevents"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>TBAssignEvents</b></font>( BtnID: <b>Integer</b>; Events: <b>array</b> <b>of</b> <a href=kol_pas.htm#tontoolbarbuttonclick target="_top">TOnToolbarButtonClick</a> );</font>
<br>
 <a name="toolbar">
Allows to assign separate <a href=#onclick target="main">OnClick</a> events for every toolbar button.
BtnID should be toolbar button ID or index of the first button to
assign event. If it is an ID, events are assigned to buttons in
creation order. Otherwise, events are assigned in placement order.
Anyway, separator buttons are not skipped, so pass at least nil for such
button as an event.
<br>
Please note, that though not all buttons should exist before
assigning events to it, therefore at least the first button
(specified by BtnID) must be already added before calling TBAssignEvents.
</p>
<a name="tbresetimgidx"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>TBResetImgIdx</b></font>( BtnID, BtnCount: <b>Integer</b> );</font>
<br>
 <a name="toolbar">
Resets image index for BtnCount buttons starting from BtnID.
</p>
<a name="tbitem2index"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>TBItem2Index</b></font>( BtnID: <b>Integer</b> ): <b>Integer</b>;</font>
<br>
 <a name="toolbar">
Converts button command id to button index for tool bar.
</p>
<a name="tbindex2item"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>TBIndex2Item</b></font>( Idx: <b>Integer</b> ): <b>Integer</b>;</font>
<br>
 <a name="toolbar">
Converts toolbar button index to its command ID.
</p>
<a name="tbconvertidxarray2id"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>TBConvertIdxArray2ID</b></font>( <b>const</b> IdxVars: <b>array</b> <b>of</b> PDWORD );</font>
<br>
 <a name="toolbar">
Converts toolbar button indexes to its command IDs for an array
of indexes (each item in the array passed is a pointer to
Integer, containing button index when the procedure is callled,
then all these indexes are relaced with a correspondent button ID).
</p>
<a name="tbbuttonseparator"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>TBButtonSeparator</b></font>( BtnID: <b>Integer</b> ): <b>Boolean</b>;</font>
<br>
 <a name="toolbar">
Returns TRUE, if a toolbar button is separator.
</p>
<a name="tbbuttonatpos"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>TBButtonAtPos</b></font>( X, Y: <b>Integer</b> ): <b>Integer</b>;</font>
<br>
 <a name="toolbar">
Returns command ID of button at the given position on toolbar,
or -1, if there are no button at the position. Value 0 is returned
for separators.
</p>
<a name="tbbtnidxatpos"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>TBBtnIdxAtPos</b></font>( X, Y: <b>Integer</b> ): <b>Integer</b>;</font>
<br>
 <a name="toolbar">
Returns index of button at the given position on toolbar.
This also can be index of separator button. -1 is returned if
there are no buttons found at the position.
</p>
<a name="tbmovebtn"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>TBMoveBtn</b></font>( FromIdx, ToIdx: <b>Integer</b> ): <b>Boolean</b>;</font>
<br>
 <a name="toolbar">
By TR&quot;]F. Moves button from one position to another.
</p>
<a name="tbsettooltips"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>TBSetTooltips</b></font>( BtnID1st: <b>Integer</b>; <b>const</b> Tooltips: <b>array</b> <b>of</b> PKOLChar );</font>
<br>
 <a name="toolbar">
Allows to assign tooltips to several buttons. Until this procedure
is not called, tooltips list is not created and no code is added
to executable. This method of tooltips maintainance for toolbar buttons
is useful both for static and dynamic toolbars (meaning &quot;dynamic&quot; -
toolbars with buttons, deleted and inserted at run-time).
</p>
<a name="re_textsizeprecise"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>RE_TextSizePrecise</b></font>: <b>Integer</b>;</font>
<br>
 <a name="richedit">
By Savva. Returns length of rich edit text.
</p>
<a name="re_fmtstandard"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>RE_FmtStandard</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
 <a name="richedit">
&quot;Transparent&quot; method (returns @Self as a result), which (when called)
provides &quot;standard&quot; keyboard interface for formatting Rich text (just
call this method, for example:
<p align=left><font face="Courier" color="008080"><b><pre>
    RichEd1 := <a href="kol_pas.htm#newrichedit target="_top""><font color="008080">NewRichEdit</font></a>( Panel1, [ ] ).<a href="tcontrol.htm#setalign"><font color="008080">SetAlign</font></a>( caClient ).RE_FmtStandard;
</pre></b></font></p>
Following keys will be maintained additionally:
<pre>
CTRL+I - switch &quot;Italic&quot;,
CTRL+B - switch &quot;Bold&quot;,
CTRL+U - switch &quot;Underline&quot;,
CTRL+SHIFT+U - swith underline type
and turn underline on (note, that some of underline styles
can not be shown properly in RichEdit v2.0 and lower,
though RichEdit2.0 stores data successfully).
CTRL+O - switch &quot;StrikeOut&quot;,
CTRL+'gray+' - increase font size,
CTRL+'gray-' - decrease font size,
CTRL+SHIFT+'gray+' - superscript,
CTRL+SHIFT+'gray-' - subscript.
CTRL+SHIFT+Z - ReDo
</pre>
And, though following standard formatting keys are provided by RichEdit
control itself in Windows2000, some of these are not functioning
automatically in earlier Windows versions, even for RichEdit2.0. So,
functionality of some of these (marked with (*) ) are added here too:
<pre>
CTRL+L - align paragraph left,           (*)
CTRL+R - align paragraph right,          (*)
CTRL+E - align paragraph center,         (*)
CTRL+A - select all,                     (*)
double-click on word - select word,
CTRL+Right - to next word,
CTRL+<a href=#left target="main">Left</a> - to previous word,
CTRL+Home - to the beginning of text,
CTRL+End - to the end of text.
CTRL+Z - UnDo
</pre>
If You originally assign some (plain) text to <a href=#text target="main">Text</a> property, switching &quot;underline&quot;
can also change other font attributes, e.g., &quot;bold&quot; - if fsBold style is
in default <a href=#font target="main">Font</a>. To prevent such behavior, select entire text first (see
<a href=#selectall target="main">SelectAll</a>) and make assignment to <a href=#re_font target="main">RE_Font</a> property, e.g.:
<p align=left><font face="Courier" color="008080"><b><pre>
        RichEd1.<a href="tcontrol.htm#selectall"><font color="008080">SelectAll</font></a>;
        RichEd1.<a href="tcontrol.htm#re_font"><font color="008080">RE_Font</font></a> := RichEd1.<a href="tcontrol.htm#re_font"><font color="008080">RE_Font</font></a>;
        RichEd1.<a href="tcontrol.htm#sellength"><font color="008080">SelLength</font></a> := 0;
</pre></b></font></p>
<br>
And, some other notices about formatting. Please remember, that only True
Type fonts can be succefully scaled and transformed to get desired effects
(e.g., bold). By default, RichEdit uses System font face name, which can
even have problems with fsBold style. Please remember also, that assigning
<a href=#re_font target="main">RE_Font</a> to <a href=#re_font target="main">RE_Font</a> just initializying formatting attributes, making all
those valid in entire text, but does not change font attributes. To use
True Type font, directly assign face name You wish, e.g.:
<p align=left><font face="Courier" color="008080"><b><pre>
        RichEd1.<a href="tcontrol.htm#selectall"><font color="008080">SelectAll</font></a>;
        RichEd1.<a href="tcontrol.htm#re_font"><font color="008080">RE_Font</font></a> := RichEd1.<a href="tcontrol.htm#re_font"><font color="008080">RE_Font</font></a>;
        RichEd1.<a href="tcontrol.htm#re_font"><font color="008080">RE_Font</font></a>.FontName := <font color="A08020">'Arial'</font>;
        RichEd1.<a href="tcontrol.htm#sellength"><font color="008080">SelLength</font></a> := 0;
</pre></b></font></p>
</p>
<a name="re_cancelfmtstandard"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>RE_CancelFmtStandard</b></font>;</font>
<br>
Cancels <a href=#re_fmtstandard target="main">RE_FmtStandard</a> (detaching window procedure handler).
</p>
<a name="re_loadfromstream"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>RE_LoadFromStream</b></font>( Stream: PStream; Length: <b>Integer</b>; <a href=kol_pas.htm#format target="_top">Format</a>: <a href=kol_pas.htm#tretextformat target="_top">TRETextFormat</a>; SelectionOnly: <b>Boolean</b> ): <b>Boolean</b>;</font>
<br>
 <a name="richedit">
Use this method rather then assignment to <a href=#re_text target="main">RE_Text</a> property, if
source is stored in file or stream (to minimize resources during
loading of RichEdit content). Data is loading starting from current
position in stream and no more then Length bytes are loaded (use -1
value to load to the end of stream). Loaded data replaces entire
content of RichEdit control, or selection only, depending on SelectionOnly
flag.
<br>&nbsp;&nbsp;&nbsp;
If You want to provide progress (e.g. in form of progress bar), assign
<a href=#onprogress target="main">OnProgress</a> event to your handler - and to examine current position of
loading, read TSream.Position property of soiurce stream).
</p>
<a name="re_savetostream"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>RE_SaveToStream</b></font>( Stream: PStream; <a href=kol_pas.htm#format target="_top">Format</a>: <a href=kol_pas.htm#tretextformat target="_top">TRETextFormat</a>; SelectionOnly: <b>Boolean</b> ): <b>Boolean</b>;</font>
<br>
 <a name="richedit">
Use this method rather then RE_TextProperty to store data to file
or stream (to minimize resources during saving of RichEdit content).
Data is saving starting from current position in a stream (until
end of RichEdit data). If SelectionOnly flag is True, only selected
part of RichEdit text is saved.
<br>&nbsp;&nbsp;&nbsp;
Like for <a href=#re_loadfromstream target="main">RE_LoadFromStream</a>, it is possible to assign your method to
<a href=#onprogress target="main">OnProgress</a> event (but to calculate progress of save-to-stream operation,
compare current stream position with RE_Size[ rsBytes ] property
value).
</p>
<a name="re_loadfromfile"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>RE_LoadFromFile</b></font>( <b>const</b> Filename: KOLString; <a href=kol_pas.htm#format target="_top">Format</a>: <a href=kol_pas.htm#tretextformat target="_top">TRETextFormat</a>; SelectionOnly: <b>Boolean</b> ): <b>Boolean</b>;</font>
<br>
 <a name="richedit">
Use this method rather then other assignments to <a href=#re_text target="main">RE_Text</a> property,
if a source for RichEdit is the file. See also <a href=#re_loadfromstream target="main">RE_LoadFromStream</a>.
</p>
<a name="re_savetofile"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>RE_SaveToFile</b></font>( <b>const</b> Filename: KOLString; <a href=kol_pas.htm#format target="_top">Format</a>: <a href=kol_pas.htm#tretextformat target="_top">TRETextFormat</a>; SelectionOnly: <b>Boolean</b> ): <b>Boolean</b>;</font>
<br>
 <a name="richedit">
Use this method rather then other similar, if You want to store
entire content of RichEdit or selection only of RichEdit to a file.
</p>
<a name="re_append"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>RE_Append</b></font>( <b>const</b> S: KOLString; ACanUndo: <b>Boolean</b> );</font>
<br>
</p>
<a name="re_insertrtf"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>RE_InsertRTF</b></font>( <b>const</b> S: KOLString );</font>
<br>
</p>
<a name="re_hideselection"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>RE_HideSelection</b></font>( aHide: <b>Boolean</b> );</font>
<br>
 <a name="richedit">
Allows to hide / show selection in RichEdit.
</p>
<a name="re_searchtext"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>RE_SearchText</b></font>( <b>const</b> Value: KOLString; MatchCase, WholeWord, ScanForward: <b>Boolean</b>; SearchFrom, SearchTo: <b>Integer</b> ): <b>Integer</b>;</font>
<br>
 <a name="richedit">
Searches given string starting from SearchFrom position up to SearchTo
position (to the end of text, if SearchTo is -1). Returns zero-based
character position of the next match, or -1 if there are no more matches.
To search in bacward direction, set ScanForward to False, and pass
SearchFrom &gt; SearchTo (or even SearchFrom = -1 and SearchTo = 0).
</p>
<a name="re_wsearchtext"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>RE_WSearchText</b></font>( <b>const</b> Value: WideString; MatchCase, WholeWord, ScanForward: <b>Boolean</b>; SearchFrom, SearchTo: <b>Integer</b> ): <b>Integer</b>;</font>
<br>
 <a name="richedit">
Searches given string starting from SearchFrom position up to SearchTo
position (to the end of text, if SearchTo is -1). Returns zero-based
character position of the next match, or -1 if there are no more matches.
To search in bacward direction, set ScanForward to False, and pass
SearchFrom &gt; SearchTo (or even SearchFrom = -1 and SearchTo = 0).
</p>
<a name="re_nooledragdrop"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>RE_NoOLEDragDrop</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
 <a name="richedit">
Just prevents drop OLE objects to the rich edit control. Seems not
working for some cases.
</p>
<a name="canundo"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>CanUndo</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
 <a name="edit">
 <a name="memo">
Returns True, if the edit (or RichEdit) control can correctly process
the EM_UNDO message.
</p>
<a name="emptyundobuffer"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>EmptyUndoBuffer</b></font>;</font>
<br>
 <a name="richedit">
 <a name="edit">
 <a name="memo">
Reset the undo flag of an edit control, preventing undoing all previous
changes.
</p>
<a name="undo"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>Undo</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
 <a name="edit">
 <a name="memo">
For a single-line edit control, the return value is always TRUE. For a
multiline edit control and RichEdit control, the return value is TRUE if
the undo operation is successful, or FALSE if the undo operation fails.
</p>
<a name="re_redo"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>RE_Redo</b></font>: <b>Boolean</b>;</font>
<br>
 <a name="richedit">
Only for RichEdit control: Returns True if successful.
</p>
<a name="placeright"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>PlaceRight</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Places control right (to previously created on the same parent).
</p>
<a name="placedown"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>PlaceDown</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Places control below (to previously created on the same parent).
<a href=#left target="main">Left</a> position is not changed (thus is, kept equal to Parent.Margin).
</p>
<a name="placeunder"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>PlaceUnder</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Places control below (to previously created one, aligning its
<a href=#left target="main">Left</a> position to <a href=#left target="main">Left</a> position of previous control).
</p>
<a name="setsize"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>SetSize</b></font>( W, H: <b>Integer</b> ): <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Changes size of a control. If W or H less or equal to 0,
correspondent size is not changed.
</p>
<a name="size"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>Size</b></font>( W, H: <b>Integer</b> ): <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Like <a href=#setsize target="main">SetSize</a>, but provides automatic resizing of parent control
(recursively). Especially useful for aligned controls.
</p>
<a name="setclientsize"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>SetClientSize</b></font>( W, H: <b>Integer</b> ): <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Like <a href=#setsize target="main">SetSize</a>, but works setting W = <a href=#clientwidth target="main">ClientWidth</a>, H = <a href=#clientheight target="main">ClientHeight</a>.
Use this method for forms, which can not be resized (dialogs).
</p>
<a name="makewordwrap"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>MakeWordWrap</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Determines if to autosize control (like label, button, etc.)
</p>
<a name="isautosize"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>IsAutoSize</b></font>: <b>Boolean</b>;</font>
<br>
TRUE, if a control is autosizing.
</p>
<a name="alignleft"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>AlignLeft</b></font>( P: <a href=kol_pas.htm#pcontrol target="_top">PControl</a> ): <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
assigns <a href=#left target="main">Left</a> := P.Left
</p>
<a name="aligntop"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>AlignTop</b></font>( P: <a href=kol_pas.htm#pcontrol target="_top">PControl</a> ): <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
assigns <a href=#top target="main">Top</a> := P.Top
</p>
<a name="resizeparent"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>ResizeParent</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Resizes parent, calling <a href=#resizeparentright target="main">ResizeParentRight</a> and <a href=#resizeparentbottom target="main">ResizeParentBottom</a>.
</p>
<a name="resizeparentright"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>ResizeParentRight</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Resizes parent right edge (<a href=#margin target="main">Margin</a> of parent is added to right
coordinate of a control). If called second time (for the same
parent), resizes only for increasing of right edge of parent.
</p>
<a name="resizeparentbottom"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>ResizeParentBottom</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Resizes parent bottom edge (<a href=#margin target="main">Margin</a> of parent is added to
bottom coordinate of a control).
</p>
<a name="centeronparent"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>CenterOnParent</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Centers control on parent, or if applied to a form, centers
form on screen.
</p>
<a name="shift"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>Shift</b></font>( dX, dY: <b>Integer</b> ): <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Moves control respectively to current position (<a href=#left target="main">Left</a> := <a href=#left target="main">Left</a> + dX,
<a href=#top target="main">Top</a> := <a href=#top target="main">Top</a> + dY).
</p>
<a name="setposition"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>SetPosition</b></font>( X, Y: <b>Integer</b> ): <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Moves control directly to the specified position.
</p>
<a name="tabulate"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>Tabulate</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Call it once for form/applet to provide tabulation between controls on
form/on all forms using TAB / SHIFT+TAB and arrow keys.
</p>
<a name="tabulateex"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>TabulateEx</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Call it once for form/applet to provide tabulation between controls on
form/on all forms using TAB / SHIFT+TAB and arrow keys. Arrow keys are
used more smart, allowing go to nearest control in certain direction.
</p>
<a name="setalign"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>SetAlign</b></font>( AAlign: <a href=kol_pas.htm#tcontrolalign target="_top">TControlAlign</a> ): <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
Assigns passed value to property <a href=#align target="main">Align</a>, aligning control on parent,
and returns @Self (so it is &quot;transparent&quot; function, which can be
used to adjust control at the creation, e.g.:
<p align=left><font face="Courier" color="008080"><b><pre>
 MyLabel := <a href="kol_pas.htm#newlabel target="_top""><font color="008080">NewLabel</font></a>( MyForm, <font color="A08020">'Label1'</font> ).SetAlign( caBottom );
</pre></b></font></p>
</p>
<a name="preventresizeflicks"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>PreventResizeFlicks</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
If called, prevents resizing flicks for child controls, aligned to
right and bottom (but with a lot of code added to executable - about 3,5K).
There is sensible to set <a href=#doublebuffered target="main">DoubleBuffered</a> to True also to eliminate the
most of flicks.
<br>&nbsp;&nbsp;&nbsp;
This method been applied to a form, prevents, resizing flicks for
form and all controls on the form. If it is called for applet window,
all forms are affected. And if You want, You can apply it for certain
control only - in such case only given control and its children will
be resizing without flicks (e.g., using splitter control).
</p>
<a name="setchecked"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>SetChecked</b></font>( <b>const</b> Value: <b>Boolean</b> ): <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
 <a name="checkbox">
Use it to check/uncheck check box control or push button.
Do not apply it to check radio buttons - use <a href=#setradiochecked target="main">SetRadioChecked</a>
method below.
</p>
<a name="setradiochecked"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>SetRadioChecked</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
 <a name="radiobox">
Use it to check radio button item correctly (unchecking all
alternative ones). Actually, method <a href=#click target="main">Click</a> is called, and control
itself is returned.
</p>
<a name="setradiocheckedold"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>SetRadioCheckedOld</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
 <a name="radiobox">
Old version of <a href=#setradiochecked target="main">SetRadioChecked</a> (implemented using recommended API
call. It does not work properly, if control is not visible
(together with its form).
</p>
<a name="click"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>Click</b></font>;</font>
<br>
 <a name="button">
 <a name="checkbox">
 <a name="radiobox">
Emulates click on control programmatically, sending WM_COMMAND
message with BN_CLICKED code. This method is sensible only for
buttons, checkboxes and radioboxes.
</p>
<a name="perform"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>Perform</b></font>( msgcode: <b>DWORD</b>; wParam, lParam: <b>Integer</b> ): <b>Integer</b>; stdcall;</font>
<br>
Sends message to control's window (created if needed).
</p>
<a name="postmsg"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>Postmsg</b></font>( msgcode: <b>DWORD</b>; wParam, lParam: <b>Integer</b> ): <b>Boolean</b>; stdcall;</font>
<br>
Sends message to control's window (created if needed).
</p>
<a name="attachproc"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>AttachProc</b></font>( Proc: <a href=kol_pas.htm#twindowfunc target="_top">TWindowFunc</a> );</font>
<br>
It is possible to attach dynamically any message handler to window
procedure using this method. Last attached procedure is called first.
If procedure returns True, further processing of a message is stopped.
Attached procedure can be detached using <a href=#detachproc target="main">DetachProc</a> (but do not
attach/detach procedures during handling of attached procedure -
this can hang application).
</p>
<a name="attachprocex"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>AttachProcEx</b></font>( Proc: <a href=kol_pas.htm#twindowfunc target="_top">TWindowFunc</a>; ExecuteAfterAppletTerminated: <b>Boolean</b> );</font>
<br>
The same as <a href=#attachproc target="main">AttachProc</a>, but a handler is executed even after terminating
the main message loop processing (i.e. after assigning true to
<a href=kol_pas.htm#appletterminated target="_top">AppletTerminated</a> global variable.
</p>
<a name="isprocattached"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>IsProcAttached</b></font>( Proc: <a href=kol_pas.htm#twindowfunc target="_top">TWindowFunc</a> ): <b>Boolean</b>;</font>
<br>
Returns True, if given procedure is already in chain of attached
ones for given control window proc.
</p>
<a name="detachproc"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>DetachProc</b></font>( Proc: <a href=kol_pas.htm#twindowfunc target="_top">TWindowFunc</a> );</font>
<br>
Detaches procedure attached earlier using <a href=#attachproc target="main">AttachProc</a>.
</p>
<a name="setautopopupmenu"></a>
<p>
<font face="Courier" color="#800080"><b>procedure</b> <font color="#808000"><b>SetAutoPopupMenu</b></font>( PopupMenu: <a href=kol_pas.htm#pobj target="_top">PObj</a> );</font>
<br>
To assign a popup menu to the control, call SetAutoPopupMenu method of
the control with popup menu object as a parameter.
</p>
<a name="supportmnemonics"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>SupportMnemonics</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
<br>
This method provides supporting mnemonic keys in menus, buttons, checkboxes,
toolbar buttons.
</p>
<a name="lbitematpos"></a>
<p>
<font face="Courier" color="#800080"><b>function</b> <font color="#808000"><b>LBItemAtPos</b></font>( X, Y: <b>Integer</b> ): <b>Integer</b>;</font>
<br>
 <a name="listbox">
Return index of item at the given position.
</p>
<h4 align="center"><font color="black">Methods, inherited from <a href="tobj.htm" target="_top">TObj</a></font></h4>
<h3 align="center"><font color="#FF8080">TControl events</font></h3>
<a name="onhelp"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnHelp</b></font>: TOnHelp;</font>
<br>
An event of a form, it is called when F1 pressed or help topic requested
by any other way. To prevent showing help, nullify Sender. Set Popup to
TRUE to provide showing help in a pop-up window. It is also possible to
change Context dynamically.
</p>
<a name="ondropdown"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnDropDown</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
 <a name="combo">
 <a name="toolbar">
Is called when combobox is dropped down (or drop-down button of
toolbar is pressed - see also <a href=#ontbdropdown target="main">OnTBDropDown</a>).
</p>
<a name="oncloseup"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnCloseUp</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
 <a name="combo">
Is called when combobox is closed up. When drop down list is closed
because user pressed &quot;Escape&quot; key, previous selection is restored.
To test if it is so, call GetKeyState( VK_ESCAPE ) and check, if
negative value is returned (i.e. Escape key is pressed when event
handler is calling).
</p>
<a name="onbitbtndraw"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnBitBtnDraw</b></font>: <a href=kol_pas.htm#tonbitbtndraw target="_top">TOnBitBtnDraw</a>;</font>
<br>
 <a name="bitbtn">
Special event for BitBtn. Using it, it is possible to provide
additional effects, such as highlighting button text (by changing
its <a href=#font target="main">Font</a> and other properties). If the handler returns True, it is
supposed that it made all drawing and there are no further drawing
occure.
</p>
<a name="onmeasureitem"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnMeasureItem</b></font>: <a href=kol_pas.htm#tonmeasureitem target="_top">TOnMeasureItem</a>;</font>
<br>
 <a name="combo">
 <a name="listbox">
 <a name="listview">
This event is called for owner-drawn controls, such as list box, combo box,
list view with appropriate owner-drawn style. For fixed item height controls
(list box with loOwnerDrawFixed style, combobox with coOwnerDrawFixed and
list view with lvoOwnerDrawFixed option) this event is called once. For
list box with loOwnerDrawVariable style and for combobox with coOwnerDrawVariable
style this event is called for every item.
</p>
<a name="onshow"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnShow</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
Is called when a control or form is to be shown. This event is not fired
for a form, if its <a href=#windowstate target="main">WindowState</a> initially is set to wsMaximized or
wsMinimized. This behaviour is by design (the window does not receive
WM_SHOW message in such case).
</p>
<a name="onhide"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnHide</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
Is called when a control or form becomes hidden.
</p>
<a name="onmessage"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnMessage</b></font>: <a href=kol_pas.htm#tonmessage target="_top">TOnMessage</a>;</font>
<br>
 <a name="appbutton">
 <a name="form">
Is called for every message processed by TControl object. And for
<a href=kol_pas.htm#applet target="_top">Applet</a> window, this event is called also for all messages, handled by
all its child windows (forms).
</p>
<a name="onclose"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnClose</b></font>: <a href=kol_pas.htm#toneventaccept target="_top">TOnEventAccept</a>;</font>
<br>
 <a name="form">
 <a name="applet">
Called before closing the window. It is possible to set Accept
parameter to False to prevent closing the window. This event events
is not called when windows session is finishing (to handle this
event, handle WM_QUERYENDSESSION message, or assign <a href=#onqueryendsession target="main">OnQueryEndSession</a>
event to another or the same event handler).
</p>
<a name="onqueryendsession"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnQueryEndSession</b></font>: <a href=kol_pas.htm#toneventaccept target="_top">TOnEventAccept</a>;</font>
<br>
 <a name="form">
 <a name="applet">
Called when WM_QUERYENDSESSION message come in. It is possible to set Accept
parameter to False to prevent closing the window (in such case session ending
is halted). It is possible to check <a href=#closequeryreason target="main">CloseQueryReason</a> property to find out,
why event occur.
<br>
To provide normal application close while handling OnQueryEndSession,
call in your code PostQuitMessage( 0 ) or call method <a href=#close target="main">Close</a> for the main form,
this is enough to provide all <a href=#onclose target="main">OnClose</a> and <a href=#ondestroy target="main">OnDestroy</a> handlers to be called.
</p>
<a name="onminimize"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnMinimize</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
 <a name="form">
Called when window is minimized.
</p>
<a name="onmaximize"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnMaximize</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
 <a name="form">
Called when window is maximized.
</p>
<a name="onrestore"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnRestore</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
 <a name="form">
Called when window is restored from minimized or maximized state.
</p>
<a name="onpaint"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnPaint</b></font>: TOnPaint;</font>
<br>
Event to set to override standard control painting. Can be applied
to any control (though originally was designed only for paintbox
control). When an event handler is called, it is possible to use
<a href=#updatergn target="main">UpdateRgn</a> to examine what parts of window require painting to
improve performance of the painting operation.
</p>
<a name="onprepaint"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnPrePaint</b></font>: TOnPaint;</font>
<br>
Only for graphic controls. If you assign it, call <a href=#invalidate target="main">Invalidate</a> also.
</p>
<a name="onpostpaint"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnPostPaint</b></font>: TOnPaint;</font>
<br>
Only for graphic controls. If you assign it, call <a href=#invalidate target="main">Invalidate</a> also.
</p>
<a name="onerasebkgnd"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnEraseBkgnd</b></font>: TOnPaint;</font>
<br>
This event allows to override erasing window background in response
to WM_ERASEBKGND message. This allows to add some decorations to
standard controls without overriding its painting in total.
Note: When erase background, remember, that property <a href=#clientrect target="main">ClientRect</a> can
return not true client rectangle of the window - use GetClientRect
API function instead. For example:
<p align=left><font face="Courier" color="008080"><b><pre>

<font color="800000"><b>var</b></font> BkBmp: HBitmap;

<font color="800000"><b>procedure</b></font> TForm1.KOLForm1FormCreate(Sender: <a href="kol_pas.htm#pobj target="_top""><font color="008080">PObj</font></a>);
<font color="800000"><b>begin</b></font>
  Toolbar1.OnEraseBkgnd := DecorateToolbar;
  BkBmp := LoadBitmap( hInstance, <font color="A08020">'BK1'</font> );
<font color="800000"><b>end</b></font>;

<font color="800000"><b>procedure</b></font> TForm1.DecorateToolbar(Sender: <a href="kol_pas.htm#pcontrol target="_top""><font color="008080">PControl</font></a>; DC: HDC);
<font color="800000"><b>var</b></font> CR: TRect;
<font color="800000"><b>begin</b></font>
  GetClientRect( Sender.<a href="tcontrol.htm#handle"><font color="008080">Handle</font></a>, CR );
  Sender.<a href="tcontrol.htm#canvas"><font color="008080">Canvas</font></a>.<a href="tcontrol.htm#brush"><font color="008080">Brush</font></a>.BrushBitmap := BkBmp;
  Sender.<a href="tcontrol.htm#canvas"><font color="008080">Canvas</font></a>.FillRect( CR );
<font color="800000"><b>end</b></font>;

</pre></b></font></p>
</p>
<a name="onclick"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnClick</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
 <a name="button">
 <a name="checkbox">
 <a name="radiobox">
 <a name="toolbar">
Called on click at control. For buttons, checkboxes and radioboxes
is called regadless if control clicked by mouse or keyboard. For toolbar,
the same event is used for all toolbar buttons and toolbar itself.
To determine which toolbar button is clicked, check <a href=#curindex target="main">CurIndex</a> property.
And note, that all the buttons including separator buttons are enumerated
starting from 0. Though images are stored (and prepared) only for
non-separator buttons. And to determine, if toolbar button was clicked
with right mouse button, check <a href=#rightclick target="main">RightClick</a> property.
<br>
This event does not work on a Form, still it is fired in responce to
WM_COMMAND window message mainly rather direct to mouse down. But, if
you want to have OnClick event to be fired on a Form, use (following)
property <a href=#onformclick target="main">OnFormClick</a> to assign it.
</p>
<a name="onformclick"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnFormClick</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
 <a name="form">
Assign you <a href=#onclick target="main">OnClick</a> event handler using this property, if you want it to
be fired in result of mouse click on a form surface. Use to assign the
event only for forms (to avoid doublicated firing the handler).
<br>
Note: for a form, in case of WM_xDOUBLECLK event, this event is fired
for both clicks. So if you install both OnFormClick and <a href=#onmousedblclk target="main">OnMouseDblClk</a>,
handlers will be called in the following sequence for each double click:
OnFormClick; <a href=#onmousedblclk target="main">OnMouseDblClk</a>; OnFormClick.
</p>
<a name="onenter"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnEnter</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
Called when control receives focus.
</p>
<a name="onleave"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnLeave</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
Called when control looses focus.
</p>
<a name="onchange"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnChange</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
 <a name="edit">
 <a name="memo">
 <a name="listbox">
 <a name="combo">
 <a name="tabcontrol">
Called when edit control is changed, or selection in listbox or
current index in combobox is changed (but if OnSelChanged assigned,
the last is called for change selection). To respond to check/uncheck
checkbox or radiobox events, use <a href=#onclick target="main">OnClick</a> instead.
</p>
<a name="onselchange"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnSelChange</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
 <a name="richedit">
 <a name="listbox">
 <a name="combo">
 <a name="treeview">
Called for rich edit control, listbox, combobox or treeview when current selection
(range, or current item) is changed. If not assigned, but <a href=#onchange target="main">OnChange</a> is
assigned, <a href=#onchange target="main">OnChange</a> is called instead.
</p>
<a name="onresize"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnResize</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
Called whenever control receives message WM_SIZE (thus is, if
control is resized.
</p>
<a name="onmove"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnMove</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
Called whenever control receives message WM_MOVE (i.e. when control is
moved over its parent).
</p>
<a name="onmoving"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnMoving</b></font>: TOnEventMoving;</font>
<br>
Called whenever control receives message WM_MOVE (i.e. when control is
moved over its parent).
</p>
<a name="onsplit"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnSplit</b></font>: <a href=kol_pas.htm#tonsplit target="_top">TOnSplit</a>;</font>
<br>
 <a name="splitter">
Called when splitter control is dragging - to allow for
your event handler to decide if to accept new size of
left (top) control, and new size of the rest area of parent.
</p>
<a name="onkeydown"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnKeyDown</b></font>: <a href=kol_pas.htm#tonkey target="_top">TOnKey</a>;</font>
<br>
Obvious.
</p>
<a name="onkeyup"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnKeyUp</b></font>: <a href=kol_pas.htm#tonkey target="_top">TOnKey</a>;</font>
<br>
Obvious.
</p>
<a name="onchar"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnChar</b></font>: <a href=kol_pas.htm#tonchar target="_top">TOnChar</a>;</font>
<br>
Deprecated event, use <a href=#onkeychar target="main">OnKeyChar</a>.
</p>
<a name="onkeychar"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnKeyChar</b></font>: <a href=kol_pas.htm#tonchar target="_top">TOnChar</a>;</font>
<br>
Obviuos.
</p>
<a name="onkeydeadchar"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnKeyDeadChar</b></font>: <a href=kol_pas.htm#tonchar target="_top">TOnChar</a>;</font>
<br>
Obviuos.
</p>
<a name="onmouseup"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnMouseUp</b></font>: <a href=kol_pas.htm#tonmouse target="_top">TOnMouse</a>;</font>
<br>
Obvious.
</p>
<a name="onmousedown"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnMouseDown</b></font>: <a href=kol_pas.htm#tonmouse target="_top">TOnMouse</a>;</font>
<br>
Obvious.
</p>
<a name="onmousemove"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnMouseMove</b></font>: <a href=kol_pas.htm#tonmouse target="_top">TOnMouse</a>;</font>
<br>
Obvious.
</p>
<a name="onmousedblclk"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnMouseDblClk</b></font>: <a href=kol_pas.htm#tonmouse target="_top">TOnMouse</a>;</font>
<br>
Obvious.
</p>
<a name="onmousewheel"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnMouseWheel</b></font>: <a href=kol_pas.htm#tonmouse target="_top">TOnMouse</a>;</font>
<br>
Mouse wheel (up or down) event. In Windows, only focused controls and
controls having scrollbars (or a scrollbar iteself) receive such
message. To get direction and amount of wheel, use typecast:
SmallInt( HiWord( Mouse.Shift ) ). Value 120 corresponds to one wheel
step (-120 - for step back).
</p>
<a name="onmouseenter"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnMouseEnter</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
Is called when mouse is entered into control. See also <a href=#onmouseleave target="main">OnMouseLeave</a>.
</p>
<a name="onmouseleave"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnMouseLeave</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
Is called when mouse is leaved control. If this event is assigned,
then mouse is captured on mouse enter event to handle all other
mouse events until mouse cursor leaves the control.
</p>
<a name="ontestmouseover"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnTestMouseOver</b></font>: <a href=kol_pas.htm#tontestmouseover target="_top">TOnTestMouseOver</a>;</font>
<br>
 <a name="bitbtn">
Special event, which allows to extend <a href=#onmouseenter target="main">OnMouseEnter</a> / <a href=#onmouseleave target="main">OnMouseLeave</a>
(and also <a href=#flat target="main">Flat</a> property for BitBtn control). If a handler is assigned
to this event, actual testing whether mouse is in control or not,
is occuring in the handler. So, it is possible to simulate more
careful hot tracking for controls with non-rectangular shape (such
as glyphed BitBtn control).
</p>
<a name="onendeditlvitem"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnEndEditLVItem</b></font>: <a href=kol_pas.htm#toneditlvitem target="_top">TOnEditLVItem</a>;</font>
<br>
 <a name="listview">
Called when edit of an item label in ListView control finished. Return
True to accept new label text, or false - to not accept it (item label
will not be changed). If handler not set to an event, all changes are
accepted.
</p>
<a name="onlvdelete"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnLVDelete</b></font>: <a href=kol_pas.htm#tondeletelvitem target="_top">TOnDeleteLVItem</a>;</font>
<br>
 <a name="listview">
This event is called when an item is deleted in the listview.
Do not add, delete, or rearrange items in the list view while processing
this notification.
</p>
<a name="ondeletelvitem"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnDeleteLVItem</b></font>: <a href=kol_pas.htm#tondeletelvitem target="_top">TOnDeleteLVItem</a>;</font>
<br>
 <a name="listview">
Called for every deleted list view item.
</p>
<a name="ondeletealllvitems"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnDeleteAllLVItems</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
 <a name="listview">
Called when all the items of the list view control are to be deleted. If after
returning from this event handler event <a href=#ondeletelvitem target="main">OnDeleteLVItem</a> is yet assigned,
an event <a href=#ondeletelvitem target="main">OnDeleteLVItem</a> will be called for every deleted item.
</p>
<a name="onlvdata"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnLVData</b></font>: <a href=kol_pas.htm#tonlvdata target="_top">TOnLVData</a>;</font>
<br>
 <a name="listview">
Called to provide virtual list view with actual data. To use list view as
virtaul list view, define also lvsOwnerData style and set <a href=#count target="main">Count</a> property
to actual row count of the list view. This manner of working with list view
control can greatly improve performance of an application when working with
huge data sets represented in listview control.
</p>
<a name="oncomparelvitems"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnCompareLVItems</b></font>: <a href=kol_pas.htm#toncomparelvitems target="_top">TOnCompareLVItems</a>;</font>
<br>
 <a name="listview">
Event to compare two list view items during sort operation (initiated by
<a href=#lvsort target="main">LVSort</a> method call). Do not send any messages to the list view control
while it is sorting - results can be unpredictable!
</p>
<a name="oncolumnclick"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnColumnClick</b></font>: <a href=kol_pas.htm#tonlvcolumnclick target="_top">TOnLVColumnClick</a>;</font>
<br>
 <a name="listview">
This event handler is called when column of the list view control is clicked.
You can use this event to initiate sorting of list view items by this column.
</p>
<a name="onlvstatechange"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnLVStateChange</b></font>: <a href=kol_pas.htm#tonlvstatechange target="_top">TOnLVStateChange</a>;</font>
<br>
 <a name="listview">
This event occure when an item or items range in list view control are
changing its state (e.g. selected or unselected).
</p>
<a name="ondrawitem"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnDrawItem</b></font>: <a href=kol_pas.htm#tondrawitem target="_top">TOnDrawItem</a>;</font>
<br>
 <a name="listview">
 <a name="listbox">
 <a name="combo">
This event can be used to implement custom drawing for list view, list box, dropped
list of a combobox. For a list view, custom drawing using this event is possible
only in lvsDetail and lvsDetailNoHeader styles, and OnDrawItem is called to draw
entire row at once only. See also <a href=#onlvcustomdraw target="main">OnLVCustomDraw</a> event.
</p>
<a name="onlvcustomdraw"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnLVCustomDraw</b></font>: <a href=kol_pas.htm#tonlvcustomdraw target="_top">TOnLVCustomDraw</a>;</font>
<br>
 <a name="listview">
Custom draw event for listview. For every item to be drawn, this event
can be called several times during a single drawing cycle - depending on
a result, returned by an event handler. Stage can have one of following
values:
<pre>
CDDS_PREERASE
CDDS_POSTERASE
CDDS_ITEMPREERASE
CDDS_PREPAINT
CDDS_ITEMPREPAINT
CDDS_ITEM
CDDS_SUBITEM + CDDS_ITEMPREPAINT
CDDS_SUBITEM + CDDS_ITEMPOSTPAINT
CDDS_ITEMPOSTPAINT
CDDS_POSTPAINT
&lt;/pre&gt;
When called, see on Stage to get know, on what stage the event is
activated. And depend on the stage and on what you want to paint,
return a value as a result, which instructs the system, if to use
default drawing on this (and follows) stage(s) for the item, and if
to notify further about different stages of drawing the item during
this drawing cycle. Possible values to return are:
<pre>
CDRF_DODEFAULT - perform default drawing. Do not notify further for this
item (subitem) (or for entire listview, if called with
flag CDDS_ITEM reset - ?);
CDRF_NOTIFYITEMDRAW - return this value, when the event is called the
first time in a cycle of drawing, with ItemIdx = -1 and
flag CDDS_ITEM reset in Stage parameter;
CDRF_NOTIFYPOSTERASE - usually can be used to provide default erasing,
if you want to perform drawing immediately after that;
CDRF_NOTIFYPOSTPAINT - return this value to provide calling the event
after performing default drawing. Useful when you wish
redraw only a part of the (sub)item;
CDRF_SKIPDEFAULT - return this value to inform the system that all
drawing is done and system should not peform any more
drawing for the (sub)item during this drawing cycle.
CDRF_NEWFONT - informs the system, that font is changed and default
drawing should be performed with changed font;
</pre>
If you want to get notifications for each subitem, do not use option
lvoOwnerDrawFixed, because such style prevents system from notifying
the application for each subitem to be drawn in the listview and only
notifications will be sent about entire items.
<br>
See also NM_CUSTOMDRAW in API Help.
</p>
<a name="ontvbegindrag"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnTVBeginDrag</b></font>: <a href=kol_pas.htm#tontvbegindrag target="_top">TOnTVBeginDrag</a>;</font>
<br>
 <a name="treeview">
Is called for tree view, when its item is to be dragging.
</p>
<a name="ontvbeginedit"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnTVBeginEdit</b></font>: <a href=kol_pas.htm#tontvbeginedit target="_top">TOnTVBeginEdit</a>;</font>
<br>
 <a name="treeview">
Is called for tree view, when its item label is to be editing.
</p>
<a name="ontvendedit"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnTVEndEdit</b></font>: <a href=kol_pas.htm#tontvendedit target="_top">TOnTVEndEdit</a>;</font>
<br>
 <a name="treeview">
Is called when item label is edited. It is possible to cancel
edit, returning False as a result.
</p>
<a name="ontvexpanding"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnTVExpanding</b></font>: <a href=kol_pas.htm#tontvexpanding target="_top">TOnTVExpanding</a>;</font>
<br>
 <a name="treeview">
Is called just before expanding/collapsing item. It is possible to
return TRUE to prevent expanding item, otherwise FALSE should be returned.
</p>
<a name="ontvexpanded"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnTVExpanded</b></font>: <a href=kol_pas.htm#tontvexpanded target="_top">TOnTVExpanded</a>;</font>
<br>
 <a name="treeview">
Is called after expanding/collapsing item children.
</p>
<a name="ontvdelete"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnTVDelete</b></font>: <a href=kol_pas.htm#tontvdelete target="_top">TOnTVDelete</a>;</font>
<br>
 <a name="treeview">
Is called just before deleting item. You may use this event to free
resources, associated with an item (see <a href=#tvitemdata target="main">TVItemData</a> property).
</p>
<a name="ontvselchanging"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnTVSelChanging</b></font>: <a href=kol_pas.htm#tontvselchanging target="_top">TOnTVSelChanging</a>;</font>
<br>
 <a name="treeview">
Is called before changing the selection. The handler can return FALSE
to prevent changing the selection.
</p>
<a name="ontbdropdown"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnTBDropDown</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
 <a name="toolbar">
This event is called for drop down buttons, when user click drop part
of drop down button. To determine for which button event is called,
look at <a href=#curitem target="main">CurItem</a> or <a href=#curindex target="main">CurIndex</a> property. It is also possible to use
common (with combobox) property <a href=#ondropdown target="main">OnDropDown</a>.
</p>
<a name="ontbclick"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnTBClick</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
 <a name="toolbar">
The same as <a href=#onclick target="main">OnClick</a>.
</p>
<a name="ontbcustomdraw"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnTBCustomDraw</b></font>: <a href=kol_pas.htm#tontbcustomdraw target="_top">TOnTBCustomDraw</a>;</font>
<br>
 <a name="toolbar">
An event (mainly) to customize toolbar background.
</p>
<a name="onre_insovrmode_change"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnRE_InsOvrMode_Change</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
 <a name="richedit">
This event is called, whenever key INSERT is pressed in control (and for
RichEdit, this means, that insert mode is changed).
</p>
<a name="onprogress"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnProgress</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
 <a name="richedit">
This event is called during <a href=#re_savetostream target="main">RE_SaveToStream</a>, <a href=#re_loadfromstream target="main">RE_LoadFromStream</a> (and also
during <a href=#re_savetofile target="main">RE_SaveToFile</a>, <a href=#re_loadfromfile target="main">RE_LoadFromFile</a> and while accessing or changing
<a href=#re_text target="main">RE_Text</a> property). To calculate relative progress, it is possible to
examine current position in stream/file with its total size while reading,
or with rich edit text size, while writing (property <a href=#re_textsize target="main">RE_TextSize</a>[ rsBytes ]).
</p>
<a name="onre_overurl"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnRE_OverURL</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
 <a name="richedit">
Is called when mouse is moving over URL. This can be used to set
cursor, for example, depending on type of URL (to determine URL type
read property <a href=#re_url target="main">RE_URL</a>).
</p>
<a name="onre_urlclick"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnRE_URLClick</b></font>: <a href=kol_pas.htm#tonevent target="_top">TOnEvent</a>;</font>
<br>
 <a name="richedit">
Is called when click on URL detected.
</p>
<a name="ondtpuserstring"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnDTPUserString</b></font>: <a href=kol_pas.htm#tdtparseinputevent target="_top">TDTParseInputEvent</a>;</font>
<br>
Special event to parse input from the application. Option dtpoParseInput
must be set when control is created.
</p>
<a name="onsbbeforescroll"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnSBBeforeScroll</b></font>: TOnSBBeforeScroll;</font>
<br>
</p>
<a name="onsbscroll"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnSBScroll</b></font>: TOnSBScroll;</font>
<br>
</p>
<a name="ondropfiles"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnDropFiles</b></font>: <a href=kol_pas.htm#tondropfiles target="_top">TOnDropFiles</a>;</font>
<br>
Assign this event to your handler, if You want to accept drag and drop
files from other applications such as explorer onto your control. When
this event is assigned to a control or form, this has effect also for
all its child controls too.
</p>
<a name="onscroll"></a>
<p>
<font face="Courier" color="#800080"><b>property</b> <font color="#808000"><b>OnScroll</b></font>: TOnScroll;</font>
<br>
</p>
<h4 align="center"><font color="black">Events, inherited from <a href="tobj.htm" target="_top">TObj</a></font></h4>
<h3 align="center"><font color="#FF8080">TControl fields</font></h3>
<a name="fchildren"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fChildren</b></font>: <a href=kol_pas.htm#plist target="_top">PList</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
List of children.
</p>
<a name="fmdiclient"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fMDIClient</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
MDI client window control
</p>
<a name="fmdichildren"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fMDIChildren</b></font>: <a href=kol_pas.htm#plist target="_top">PList</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
List of MDI children. It is filled for MDI client window.
</p>
<a name="fwndfunc"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fWndFunc</b></font>: <b>Pointer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Initially pointer to <a href=kol_pas.htm#wndfunc target="_top">WndFunc</a>. For MDI child window, points to DefMDIChildProc.
</p>
<a name="fexmsgproc"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fExMsgProc</b></font>: <b>function</b>( <a href=kol_pas.htm#applet target="_top">Applet</a>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>; <b>var</b> Msg: TMsg ): <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Additional message handler called directly from <a href=kol_pas.htm#applet#processmessage>Applet.ProcessMessage</a>.
Used to call TranslateMDISysAccel API function for MDI application.
</p>
<a name="fmdidestroying"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fMDIDestroying</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
</p>
<a name="ftmpbrush"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fTmpBrush</b></font>: HBrush;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
<a href=#brush target="main">Brush</a> handle to return in response to some color set messages.
Intended for internal use instead of Brush.Color if possible
to avoid using it.
</p>
<a name="fmemberscount"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fMembersCount</b></font>: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Memebers count is first used in XCustomControl to separate
some internal child controls from common XControl.Children
and make it invisible among <a href=#children target="main">Children</a>[].
</p>
<a name="fdrawctrl1st"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fDrawCtrl1st</b></font>: <a href=kol_pas.htm#pcontrol target="_top">PControl</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Child control to draw it first, i.e. foreground of others.
</p>
<a name="fcreating"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>FCreating</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
True, when creating of object is in progress.
</p>
<a name="fdestroying"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fDestroying</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
True, when destroying of the window is started.
</p>
<a name="fbegindestroying"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fBeginDestroying</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
true, when destroying of the window is initiated by the system, i.e.
message WM_DESTROY fired
</p>
<a name="fnestedmsghandling"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fNestedMsgHandling</b></font>: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
level of nested message handling for a control. Only when it is 0 at
the end of message handling and <a href=#fbegindestroying target="main">fBeginDestroying</a> set, the control is
destroyed.
</p>
<a name="fmenu"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fMenu</b></font>: HMenu;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Usually used to store handle of attached main menu, but sometimes
is used to store control ID (for standard GUI controls only).
</p>
<a name="fmenuobj"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fMenuObj</b></font>: <a href=kol_pas.htm#pobj target="_top">PObj</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
PMenu pointer to TMenu object. Freed automatically with entire
chain of menu objects attached to a control (or form).
</p>
<a name="fimagelist"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fImageList</b></font>: <a href=kol_pas.htm#pimagelist target="_top">PImageList</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Pointer to first private image list. Control can own several image,
lists, linked to a chain of image list objects. All these image lists
are released automatically, when control is destroyed.
</p>
<a name="fctlimagelistsml"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fCtlImageListSml</b></font>: <a href=kol_pas.htm#pimagelist target="_top">PImageList</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
ImageList object (with small icons 16x16) to use with a control (e.g.,
with ListView control).
If not set, but control has a list of image list objects, last added
image list with small icons is used automatically.
</p>
<a name="fctlimagelistnormal"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fCtlImageListNormal</b></font>: <a href=kol_pas.htm#pimagelist target="_top">PImageList</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
ImageList object (with big icons 32x32) to use with a control.
If not set, last added image list with big icons is used.
</p>
<a name="fctlimgliststate"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fCtlImgListState</b></font>: <a href=kol_pas.htm#pimagelist target="_top">PImageList</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
ImageList object to use as a state image list (for ListView control).
</p>
<a name="fisapplet"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fIsApplet</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
True, if the object represent application taskbar button.
</p>
<a name="fisform"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fIsForm</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
True, if the object is form.
</p>
<a name="fismdichild"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fIsMDIChild</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
TRUE, if the object is MDI child form.
</p>
<a name="fiscontrol"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fIsControl</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
True, if it is a control on form.
</p>
<a name="fisstaticcontrol"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fIsStaticControl</b></font>: <b>Byte</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
True, if it is static control with a caption. (To prevent flickering
it in <a href=#doublebuffered target="main">DoubleBuffered</a> mode.
</p>
<a name="fiscommoncontrol"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fIsCommonControl</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
True, if it is common control.
</p>
<a name="fchangedpossz"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fChangedPosSz</b></font>: <b>Byte</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Flags of changing left (1), top (2), width (4) or height (8)
</p>
<a name="fcannotdoublebuf"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fCannotDoubleBuf</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
True, if cannot set <a href=#doublebuffered target="main">DoubleBuffered</a> to True (RichEdit).
</p>
<a name="fwindowed"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fWindowed</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
True, if control is windowed (or is a form). It is set to FALSE only for
graphic controls.
</p>
<a name="fctlclsnamechg"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fCtlClsNameChg</b></font>: <b>Boolean</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
True, if control class name changed and memory is allocated to store it.
</p>
<a name="fcolor"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fColor</b></font>: TColor;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
<a href=#color target="main">Color</a> of text. Used instead of fFont.Color internally to                                    //
avoid usage of <a href=#font target="main">Font</a> object if user is not accessing and changing it.
</p>
<a name="fcanvas"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fCanvas</b></font>: <a href=kol_pas.htm#pcanvas target="_top">PCanvas</a>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
<a href=#color target="main">Color</a> of control background.
</p>
<a name="fclienttop"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fClientTop</b></font>, <a href=#fclientbottom target="main">fClientBottom</a>, <a href=#fclientleft target="main">fClientLeft</a>, <a href=#fclientright target="main">fClientRight</a>: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Store adjustment factor of <a href=#clientrect target="main">ClientRect</a> for some 'idiosincrasies' windows,                    //
such as Groupbox or Tabcontrol.
</p>
<a name="fclientbottom"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fClientBottom</b></font>, <a href=#fclientleft target="main">fClientLeft</a>, <a href=#fclientright target="main">fClientRight</a>: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Store adjustment factor of <a href=#clientrect target="main">ClientRect</a> for some 'idiosincrasies' windows,                    //
such as Groupbox or Tabcontrol.
</p>
<a name="fclientleft"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fClientLeft</b></font>, <a href=#fclientright target="main">fClientRight</a>: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Store adjustment factor of <a href=#clientrect target="main">ClientRect</a> for some 'idiosincrasies' windows,                    //
such as Groupbox or Tabcontrol.
</p>
<a name="fclientright"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fClientRight</b></font>: <b>Integer</b>;</font>
&nbsp;&nbsp;&nbsp;<font face="Webdings" size=7>&#78;</font>&nbsp;&nbsp;&nbsp;
<br>
Store adjustment factor of <a href=#clientrect target="main">ClientRect</a> for some 'idiosincrasies' windows,                    //
such as Groupbox or Tabcontrol.
</p>
<a name="fmodalresult"></a>
<p>
<font face="Courier" color="#800080"><font color="#808000"><b>fModalResult</b></font>;</font>
<br>
 <a name="form">
<a href=#modal target="main">Modal</a> result. Set it to value&lt;&gt;0 to stop modal dialog. By agreement,
value 1 corresponds 'OK', 2 - 'Cancel'. But it is totally by decision
of yours how to interpret this value.
</p>
<h4 align="center"><font color="black">Fields, inherited from <a href="tobj.htm" target="_top">TObj</a></font></h4>
<hr>
<p align="center">[&nbsp;<a href=index.htm>Index</a>&nbsp;]</p>
<p align="center"><font face="Comic Sans MS"><small>This help is generated 14-Jun-2010 by KOL Help generator, (C) 2000-2001 by Vladimir Kladov<br>Modified (C) 2003 by Alexander Bartov</small></font></p>
</body>
</html>
